(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[1768],{4670:function(e,r,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/sequence",function(){return n(7483)}])},7483:function(e,r,n){"use strict";n.r(r),n.d(r,{__toc:function(){return c}});var a=n(5893),t=n(2673),i=n(5417),s=n(3209);n(4759);var l=n(2643),d=n(208),p=n(8902);let o=e=>{let{children:r}=e,n=Object.assign({div:"div"},(0,l.a)());return(0,a.jsx)(n.div,{className:"max-w-screen-xl mx-auto px-4 py-8",children:r})},c=[{depth:2,value:"Authentication Sequence",id:"authentication-sequence"},{depth:2,value:"Authentication Flow",id:"authentication-flow"},{depth:2,value:"Group Chat Creation",id:"group-chat-creation"},{depth:2,value:"Heartbeat Sequence",id:"heartbeat-sequence"},{depth:2,value:"Private Message Sequence",id:"private-message-sequence"},{depth:2,value:"Group Chat Sequence",id:"group-chat-sequence"}];function S(e){let r=Object.assign({h1:"h1",p:"p",h2:"h2"},(0,l.a)(),e.components);return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(r.h1,{children:"Sequence Flow"}),"\n",(0,a.jsx)(d.UW,{type:"info",children:(0,a.jsx)(r.p,{children:"This section provides a detailed view of the message flow within the Whisper system, illustrating how different components interact during typical operations."})}),"\n",(0,a.jsx)(r.h2,{id:"authentication-sequence",children:"Authentication Sequence"}),"\n",(0,a.jsx)(r.p,{children:"The following diagram illustrates the sequence of events that occurs when a message is sent from one user to another:"}),"\n",(0,a.jsx)(p.Z,{id:"message-sequence",content:"\nsequenceDiagram\n    participant ClientApp as Client Application\n    participant ClientService as Client AuthService\n    participant ClientHandler as Client AuthHandler\n    participant ServerHandler as Server AuthHandler\n    participant ServerStorage as Server Storage\n    participant ServerSession as Server SessionManager\n    participant OtherClients as Other Online Clients\n\n    Note over ClientApp, ServerSession: User Registration\n    ClientApp->>ClientService: register(username, password)\n    ClientService->>ServerHandler: REGISTER_REQUEST\n    ServerHandler->>ServerStorage: create_user(username, password)\n    ServerStorage-->>ServerHandler: User object or None\n    alt Registration Success\n        ServerHandler-->>ClientService: REGISTER_RESPONSE (success=true, user_id)\n    else Registration Failure\n        ServerHandler-->>ClientService: REGISTER_RESPONSE (success=false)\n    end\n    ClientService->>ClientHandler: handle_register_response(message)\n    ClientHandler->>ClientApp: Update UI (registration result)\n\n    Note over ClientApp, ServerSession: User Login\n    ClientApp->>ClientService: login(username, password)\n    ClientService->>ServerHandler: LOGIN_REQUEST\n    ServerHandler->>ServerStorage: verify_user_credentials(username, password)\n    ServerStorage-->>ServerHandler: User object or None\n    alt Login Success\n        ServerHandler->>ServerSession: authenticate_session(writer, user_id, username)\n        ServerHandler->>ServerStorage: update_user_last_login(user_id)\n        ServerHandler-->>ClientService: LOGIN_RESPONSE (success=true, user_id, username, token)\n        ServerHandler->>OtherClients: USER_STATUS_UPDATE_NOTIFICATION (user_id, username, ONLINE)\n        ClientService->>ClientHandler: handle_login_response(message)\n        ClientHandler->>ClientApp: Update UI (authenticated, user_id, username, token)\n        ClientApp->>ClientService: query_all_user_status() (Post-login action)\n        ClientApp->>ClientService: get_my_groups() (Post-login action)\n    else Login Failure\n        ServerHandler-->>ClientService: LOGIN_RESPONSE (success=false)\n        ClientService->>ClientHandler: handle_login_response(message)\n        ClientHandler->>ClientApp: Update UI (login failed)\n    end\n\n    Note over ClientApp, ServerSession: User Logout\n    ClientApp->>ClientService: logout()\n    ClientService->>ServerHandler: LOGOUT_REQUEST\n    alt User was Authenticated\n        ServerHandler->>ServerSession: deauthenticate_session(writer)\n        ServerSession-->>ServerHandler: deauthentication_result\n        ServerHandler-->>ClientService: LOGOUT_RESPONSE (success=true)\n        %% ServerHandler->>OtherClients: USER_STATUS_UPDATE_NOTIFICATION (user_id, username, OFFLINE) - TODO: Implement broadcast\n    else User Not Authenticated\n        ServerHandler-->>ClientService: ERROR_RESPONSE (Not authenticated)\n    end\n    ClientService->>ClientHandler: handle_logout_response(message)\n    ClientHandler->>ClientApp: Update UI (logged out)\n  "}),"\n",(0,a.jsx)(r.h2,{id:"authentication-flow",children:"Authentication Flow"}),"\n",(0,a.jsx)(r.p,{children:"The following diagram illustrates the authentication process when a user logs into Whisper:"}),"\n",(0,a.jsx)(p.Z,{id:"auth-sequence",content:"\nsequenceDiagram\n    participant User as User\n    participant Client as Client Application\n    participant Auth as Authentication Service\n    participant Key as Key Management Service\n    participant DB as User Database\n    \n    User->>Client: Enter credentials\n    Client->>Auth: Submit login request\n    activate Auth\n    \n    Auth->>DB: Validate credentials\n    DB-->>Auth: Credentials valid\n    \n    Auth->>Key: Request key material\n    Key-->>Auth: Return key material\n    \n    Auth->>Auth: Generate session tokens\n    Auth-->>Client: Return auth tokens + initial key material\n    deactivate Auth\n    \n    Client->>Client: Store tokens securely\n    Client->>Client: Initialize encryption system\n    \n    Client->>User: Show authenticated UI\n  "}),"\n",(0,a.jsx)(r.h2,{id:"group-chat-creation",children:"Group Chat Creation"}),"\n",(0,a.jsx)(r.p,{children:"This diagram shows the process of creating a new group chat:"}),"\n",(0,a.jsx)(p.Z,{id:"group-chat-sequence",content:"\nsequenceDiagram\n    participant Creator as Group Creator\n    participant Server as Whisper Server\n    participant DB as Database\n    participant Members as Group Members\n    \n    Creator->>Creator: Initiate group creation\n    Creator->>Creator: Generate group key pair\n    \n    Creator->>Server: Create group request\n    activate Server\n    Server->>DB: Create group record\n    DB-->>Server: Group created\n    Server-->>Creator: Group creation confirmed\n    deactivate Server\n    \n    Creator->>Creator: Encrypt group key for each member\n    \n    loop For each member\n        Creator->>Server: Add member request (with encrypted key)\n        Server->>DB: Add member to group\n        Server->>Members: Send group invitation\n        Members->>Members: Decrypt group key\n        Members->>Server: Accept invitation\n        Server->>DB: Update member status\n        Server->>Creator: Member added confirmation\n    end\n    \n    Server->>All: Broadcast group ready notification\n  "}),"\n",(0,a.jsx)(r.h2,{id:"heartbeat-sequence",children:"Heartbeat Sequence"}),"\n",(0,a.jsx)(p.Z,{id:"sync-sequence",content:"\nsequenceDiagram\n    participant ClientApp as Client Application\n    participant ClientService as Client PresenceService\n    participant ClientHandler as Client PresenceHandler\n    participant ServerHandler as Server PresenceHandler\n    participant ServerStorage as Server Storage\n    participant ServerSession as Server SessionManager\n\n    Note over ClientApp, ServerSession: Heartbeat\n    ClientApp->>ServerHandler: HEARTBEAT_REQUEST\n    ServerHandler-->>ClientApp: HEARTBEAT_RESPONSE\n    ServerHandler->>ServerSession: Update last_heartbeat_time\n\n    Note over ClientApp, ServerSession: User Status Update Notification (e.g., on login/logout of another user)\n    ServerHandler->>ClientHandler: USER_STATUS_UPDATE_NOTIFICATION\n    ClientHandler->>ClientApp: Update UI (user status changed)\n\n    Note over ClientApp, ServerSession: Query User Status (Specific Users)\n    ClientApp->>ClientService: query_specific_user_status(user_id)\n    ClientService->>ServerHandler: QUERY_USER_STATUS_REQUEST (target_user_ids=[user_id])\n    ServerHandler->>ServerStorage: get_user_by_user_id(user_id)\n    ServerStorage-->>ServerHandler: User data or None\n    ServerHandler->>ServerSession: get_session_by_user_id(user_id)\n    ServerSession-->>ServerHandler: Session info or None\n    ServerHandler-->>ClientService: QUERY_USER_STATUS_RESPONSE (results)\n    ClientService->>ClientHandler: handle_query_user_status_response(message)\n    ClientHandler->>ClientApp: Update UI (user statuses)\n\n    Note over ClientApp, ServerSession: Query User Status (All Users)\n    ClientApp->>ClientService: query_all_user_status()\n    ClientService->>ServerHandler: QUERY_USER_STATUS_REQUEST (target_user_ids=[])\n    ServerHandler->>ServerStorage: get_all_users()\n    ServerStorage-->>ServerHandler: List of all users\n    ServerHandler->>ServerSession: get_all_sessions()\n    ServerSession-->>ServerHandler: List of all sessions\n    ServerHandler-->>ClientService: QUERY_USER_STATUS_RESPONSE (results for all users)\n    ClientService->>ClientHandler: handle_query_user_status_response(message)\n    ClientHandler->>ClientApp: Update UI (all user statuses)\n  "}),"\n",(0,a.jsx)(r.h2,{id:"private-message-sequence",children:"Private Message Sequence"}),"\n",(0,a.jsx)(p.Z,{id:"media-sequence",content:"\nsequenceDiagram\n    participant SenderApp as Sender Application\n    participant SenderService as Sender PrivateChatService\n    participant SenderHandler as Sender PrivateChatHandler\n    participant ServerHandler as Server PrivateChatHandler\n    participant ServerStorage as Server Storage\n    participant ReceiverHandler as Receiver PrivateChatHandler\n    participant ReceiverApp as Receiver Application\n\n    Note over SenderApp, ReceiverApp: Private Chat Message Exchange\n\n    Note over SenderApp, ReceiverApp: Sending Private Message\n    SenderApp->>SenderService: send_private_chat_message(recipient_id, message)\n    SenderService->>SenderApp: Update UI (optimistic message display)\n    SenderService->>ServerHandler: SEND_PRIVATE_CHAT_MESSAGE_REQUEST (recipient_user_id, content, client_message_id)\n    ServerHandler->>ServerStorage: create_private_chat_message(sender_user_id, recipient_user_id, content)\n    ServerStorage-->>ServerHandler: saved message\n\n    alt Sending Success\n        ServerHandler-->>SenderService: PRIVATE_CHAT_MESSAGE_SENT_ACK (status_message, server_message_id, client_message_id, message_timestamp)\n        SenderService->>SenderHandler: handle_private_chat_message_sent_ack(message)\n        SenderHandler->>SenderApp: Update UI (message delivery status)\n\n        alt Recipient Online\n            ServerHandler->>ReceiverHandler: RECEIVE_PRIVATE_CHAT_MESSAGE_NOTIFICATION (server_message_id, sender_user_id, sender_username, content, message_timestamp)\n            ReceiverHandler->>ReceiverApp: Update UI (new message received)\n        else Recipient Offline\n            Note over ServerHandler, ReceiverHandler: Message stored for later delivery\n        end\n    else Sending Failure\n        ServerHandler-->>SenderService: ERROR_RESPONSE (error_code, error_message)\n        SenderService->>SenderHandler: handle_error_response(message)\n        SenderHandler->>SenderApp: Update UI (message delivery failed)\n    end\n\n    Note over SenderApp, ReceiverApp: Recalling Private Message\n    SenderApp->>SenderService: recall_private_chat_message(recipient_id, server_message_id)\n    SenderService->>ServerHandler: RECALL_PRIVATE_CHAT_MESSAGE_REQUEST (recipient_user_id, server_message_id_to_recall, client_recall_request_id?)\n    ServerHandler->>ServerStorage: delete_private_chat_message(message_id)\n    ServerStorage-->>ServerHandler: success or failure\n\n    alt Recall Success\n        ServerHandler-->>SenderService: PRIVATE_CHAT_MESSAGE_RECALLED_ACK (status=true, status_message, recalled_server_message_id, client_recall_request_id?)\n        SenderService->>SenderHandler: handle_private_chat_message_recall_ack(message)\n        SenderHandler->>SenderApp: Update UI (message recalled)\n\n        alt Recipient Online\n            ServerHandler->>ReceiverHandler: RECEIVE_PRIVATE_CHAT_MESSAGE_RECALL_NOTIFICATION (server_message_id_to_recall, recalled_by_user_id, chat_partner_user_id, recall_timestamp)\n            ReceiverHandler->>ReceiverApp: Update UI (message marked as recalled)\n        end\n    else Recall Failure\n        ServerHandler-->>SenderService: PRIVATE_CHAT_MESSAGE_RECALLED_ACK (status=false, status_message, recalled_server_message_id, client_recall_request_id?)\n        SenderService->>SenderHandler: handle_private_chat_message_recall_ack(message)\n        SenderHandler->>SenderApp: Update UI (message recall failed)\n    end\n  "}),"\n",(0,a.jsx)(r.h2,{id:"group-chat-sequence",children:"Group Chat Sequence"}),"\n",(0,a.jsx)(p.Z,{id:"group-chat-sequence",content:"\nsequenceDiagram\n    participant ClientApp as Client Application\n    participant ClientService as Client GroupChatService\n    participant ClientHandler as Client GroupChatHandler\n    participant ServerHandler as Server GroupChatHandler\n    participant ServerStorage as Server Storage\n    participant GroupMembers as Other Group Members\n\n    Note over ClientApp, GroupMembers: Group Creation\n    ClientApp->>ClientService: create_group(name, description)\n    ClientService->>ServerHandler: CREATE_GROUP_REQUEST\n    ServerHandler->>ServerStorage: create_group(group_name, creator_user_id, group_description)\n    ServerStorage-->>ServerHandler: Group object or None\n    alt Creation Success\n        ServerHandler-->>ClientService: CREATE_GROUP_RESPONSE (success=true, group_id, group_name, group_description)\n        ClientService->>ClientHandler: handle_create_group_response(message)\n        ClientHandler->>ClientApp: Update UI (created group details)\n    else Creation Failure\n        ServerHandler-->>ClientService: CREATE_GROUP_RESPONSE (success=false, message)\n        ClientService->>ClientHandler: handle_create_group_response(message)\n        ClientHandler->>ClientApp: Update UI (error message)\n    end\n"}),"\n",(0,a.jsx)(p.Z,{id:"group-chat-sequence",content:"\nsequenceDiagram\n    participant ClientApp as Client Application\n    participant ClientService as Client GroupChatService\n    participant ClientHandler as Client GroupChatHandler\n    participant ServerHandler as Server GroupChatHandler\n    participant ServerStorage as Server Storage\n    participant GroupMembers as Other Group Members\n\n    Note over ClientApp, GroupMembers: Group Information Management\n    ClientApp->>ClientService: update_group_info(group_id, name, description)\n    ClientService->>ServerHandler: UPDATE_GROUP_INFO_REQUEST\n    ServerHandler->>ServerStorage: update_group_info(group_id, group_name, group_description)\n    ServerStorage-->>ServerHandler: success or failure\n    alt Update Success\n        ServerHandler-->>ClientService: UPDATE_GROUP_INFO_RESPONSE (success=true, group_id, group_name, group_description)\n        ServerHandler->>GroupMembers: GROUP_INFO_UPDATED_NOTIFICATION (group_id, updated_by_user_id, updated_by_username, new values)\n        ClientService->>ClientHandler: handle_update_group_info_response(message)\n        ClientHandler->>ClientApp: Update UI (updated group details)\n        GroupMembers->>ClientHandler: handle_group_info_updated_notification(message)\n        ClientHandler->>ClientApp: Update UI for members (updated group details)\n    else Update Failure\n        ServerHandler-->>ClientService: UPDATE_GROUP_INFO_RESPONSE (success=false, message)\n        ClientService->>ClientHandler: handle_update_group_info_response(message)\n        ClientHandler->>ClientApp: Update UI (error message)\n    end\n"}),"\n",(0,a.jsx)(p.Z,{id:"group-chat-sequence",content:"\nsequenceDiagram\n    participant ClientApp as Client Application\n    participant ClientService as Client GroupChatService\n    participant ClientHandler as Client GroupChatHandler\n    participant ServerHandler as Server GroupChatHandler\n    participant ServerStorage as Server Storage\n    participant GroupMembers as Other Group Members\n\n    Note over ClientApp, GroupMembers: Group Membership Management\n\n    Note over ClientApp, GroupMembers: Joining a Group\n    ClientApp->>ClientService: join_group(group_id)\n    ClientService->>ServerHandler: JOIN_GROUP_REQUEST\n    ServerHandler->>ServerStorage: add_user_to_group(group_id, user_id)\n    ServerStorage-->>ServerHandler: success or failure\n    alt Join Success\n        ServerHandler-->>ClientService: JOIN_GROUP_RESPONSE (success=true, group_id, group_name)\n        ServerHandler->>GroupMembers: USER_JOINED_GROUP_NOTIFICATION (group_id, joined_user_id, joined_username)\n        ClientService->>ClientHandler: handle_join_group_response(message)\n        ClientHandler->>ClientApp: Update UI (joined group details)\n        GroupMembers->>ClientHandler: handle_user_joined_group_notification(message)\n        ClientHandler->>ClientApp: Update UI for members (new member)\n    else Join Failure\n        ServerHandler-->>ClientService: JOIN_GROUP_RESPONSE (success=false, message)\n        ClientService->>ClientHandler: handle_join_group_response(message)\n        ClientHandler->>ClientApp: Update UI (error message)\n    end\n\n    Note over ClientApp, GroupMembers: Leaving a Group\n    ClientApp->>ClientService: leave_group(group_id)\n    ClientService->>ServerHandler: LEAVE_GROUP_REQUEST\n    ServerHandler->>ServerStorage: remove_user_from_group(group_id, user_id)\n    ServerStorage-->>ServerHandler: success or failure\n    alt Leave Success\n        ServerHandler-->>ClientService: LEAVE_GROUP_RESPONSE (success=true, group_id)\n        ServerHandler->>GroupMembers: USER_LEFT_GROUP_NOTIFICATION (group_id, left_user_id, left_username)\n        ClientService->>ClientHandler: handle_leave_group_response(message)\n        ClientHandler->>ClientApp: Update UI (removed group)\n        GroupMembers->>ClientHandler: handle_user_left_group_notification(message)\n        ClientHandler->>ClientApp: Update UI for members (removed member)\n    else Leave Failure\n        ServerHandler-->>ClientService: LEAVE_GROUP_RESPONSE (success=false, message)\n        ClientService->>ClientHandler: handle_leave_group_response(message)\n        ClientHandler->>ClientApp: Update UI (error message)\n    end\n\n    Note over ClientApp, GroupMembers: Getting User's Groups\n    ClientApp->>ClientService: get_my_groups()\n    ClientService->>ServerHandler: GET_MY_GROUPS_REQUEST\n    ServerHandler->>ServerStorage: get_user_groups(user_id)\n    ServerStorage-->>ServerHandler: list of groups\n    ServerHandler-->>ClientService: GET_MY_GROUPS_RESPONSE (success, groups[])\n    ClientService->>ClientHandler: handle_get_my_groups_response(message)\n    ClientHandler->>ClientApp: Update UI (list of groups)\n"}),"\n",(0,a.jsx)(p.Z,{id:"group-chat-sequence",content:"\nsequenceDiagram\n    participant SenderApp as Sender Application\n    participant SenderService as Sender GroupChatService\n    participant SenderHandler as Sender GroupChatHandler\n    participant ServerHandler as Server GroupChatHandler\n    participant ServerStorage as Server Storage\n    participant ReceiverHandler as Receiver GroupChatHandler\n    participant ReceiverApp as Receiver Application\n\n    Note over SenderApp, ReceiverApp: Group Message Exchange\n\n    Note over SenderApp, ReceiverApp: Sending Group Message\n    SenderApp->>SenderService: send_group_chat_message(group_id, message)\n    SenderService->>ServerHandler: SEND_GROUP_CHAT_MESSAGE_REQUEST (group_id, content, client_message_id)\n    ServerHandler->>ServerStorage: store_group_message(group_id, sender_id, content)\n    ServerStorage-->>ServerHandler: saved message\n    ServerHandler-->>SenderService: SEND_GROUP_CHAT_MESSAGE_ACK (server_message_id, client_message_id, timestamp)\n    ServerHandler->>ReceiverHandler: RECEIVE_GROUP_CHAT_MESSAGE_NOTIFICATION (group_id, server_message_id, sender details, content, timestamp)\n    SenderService->>SenderHandler: handle_group_chat_message_sent_ack(message)\n    SenderHandler->>SenderApp: Update UI (sent message status)\n    ReceiverHandler->>ReceiverApp: Update UI (new message)\n\n    Note over SenderApp, ReceiverApp: Recalling Group Message\n    SenderApp->>SenderService: recall_group_chat_message(group_id, server_message_id)\n    SenderService->>ServerHandler: RECALL_GROUP_CHAT_MESSAGE_REQUEST (group_id, server_message_id_to_recall)\n    ServerHandler->>ServerStorage: mark_message_as_recalled(message_id)\n    ServerStorage-->>ServerHandler: success or failure\n    alt Recall Success\n        ServerHandler-->>SenderService: GROUP_CHAT_MESSAGE_RECALLED_ACK (status_code=200, recalled_server_message_id)\n        ServerHandler->>ReceiverHandler: GROUP_CHAT_MESSAGE_RECALL_NOTIFICATION (group_id, recalled_server_message_id, recalled_by_user_id, timestamp)\n        SenderService->>SenderHandler: handle_group_chat_message_recall_ack(message)\n        SenderHandler->>SenderApp: Update UI (message recalled)\n        ReceiverHandler->>ReceiverApp: Update UI (message marked as recalled)\n    else Recall Failure\n        ServerHandler-->>SenderService: GROUP_CHAT_MESSAGE_RECALLED_ACK (status_code=4xx, error message)\n        SenderService->>SenderHandler: handle_group_chat_message_recall_ack(message)\n        SenderHandler->>SenderApp: Update UI (recall failed)\n    end\n"})]})}let u={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,a.jsx)(o,{...e,children:(0,a.jsx)(S,{...e})})},pageOpts:{filePath:"pages/sequence.mdx",route:"/sequence",timestamp:1749082044e3,pageMap:[{kind:"Meta",data:{index:{title:"Introduction",type:"page",display:"hidden"},demo:{title:"Demo & Introduction",type:"page"},protocol:{title:"Protocol",type:"page"},sequence:{title:"Sequence Flow",type:"page"},database:{title:"Database Design",type:"page"},uml:{title:"UML Structure",type:"page"},"stress-test":{title:"Stress Testing",type:"page",display:"hidden"},encrypt:{title:"Encrypt",type:"page"}}},{kind:"MdxPage",name:"database",route:"/database"},{kind:"MdxPage",name:"demo",route:"/demo"},{kind:"MdxPage",name:"encrypt",route:"/encrypt"},{kind:"MdxPage",name:"index",route:"/"},{kind:"MdxPage",name:"protocol",route:"/protocol"},{kind:"MdxPage",name:"sequence",route:"/sequence"},{kind:"MdxPage",name:"stress-test",route:"/stress-test"},{kind:"MdxPage",name:"uml",route:"/uml"}],flexsearch:{codeblocks:!0},readingTime:{text:"1 min read",minutes:.365,time:21900,words:73},title:"Sequence Flow",headings:c},pageNextRoute:"/sequence",nextraLayout:i.ZP,themeConfig:s.Z};r.default=(0,t.j)(u)},8902:function(e,r,n){"use strict";var a=n(5893),t=n(2010),i=n(7294);r.Z=e=>{let{id:r,content:s}=e,{resolvedTheme:l}=(0,t.F)(),[d,p]=(0,i.useState)(null),o=(0,i.useRef)(null);return(0,i.useEffect)(()=>{Promise.all([n.e(7163),n.e(3542),n.e(6637)]).then(n.bind(n,6637)).then(e=>{e.default.initialize({startOnLoad:!0,theme:"forest",flowchart:{useMaxWidth:!0,htmlLabels:!0},sequence:{diagramMarginX:50,diagramMarginY:10,actorMargin:80,width:150,height:65,boxMargin:10,boxTextMargin:5,noteMargin:10,messageMargin:35,mirrorActors:!0},class:{diagramPadding:8,useMaxWidth:!0}});try{e.default.render("mermaid-".concat(r),s).then(e=>{let{svg:r}=e;p(r)})}catch(e){console.error("Error rendering mermaid diagram:",e),p('<div class="p-4 text-red-500">Error rendering diagram</div>')}})},[s,r,"dark"===l]),(0,i.useEffect)(()=>{d&&o.current&&(o.current.innerHTML=d)},[d]),(0,a.jsx)("div",{className:"my-8 overflow-x-auto rounded-lg p-4 shadow-sm",children:(0,a.jsx)("div",{ref:o,className:"mermaid flex justify-center"})})}},3209:function(e,r,n){"use strict";var a=n(5893),t=n(7656),i=n(1163);let s={logo:(0,a.jsxs)("div",{className:"flex items-center",children:[(0,a.jsx)(t.Z,{size:24,className:"mr-2"}),(0,a.jsx)("span",{className:"font-bold text-xl",children:"Whisper Chat"})]}),project:{link:"https://github.com/ukeSJTU/whisper"},docsRepositoryBase:"https://github.com/ukeSJTU/whisper-docs",footer:{text:(0,a.jsxs)("span",{children:["\xa9 ",new Date().getFullYear()," Whisper Chat. All rights reserved."]})},useNextSeoProps(){let{asPath:e}=(0,i.useRouter)();return{titleTemplate:"/"!==e?"%s – Whisper Chat":"Whisper Chat - Secure Real-Time Communication",description:"Whisper is a modern, secure web-based chat application for real-time communication."}},head:(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1.0"}),(0,a.jsx)("meta",{name:"description",content:"Whisper is a modern, secure web-based chat application for real-time communication."}),(0,a.jsx)("meta",{name:"og:title",content:"Whisper Chat"}),(0,a.jsx)("link",{rel:"icon",href:"/favicon.ico"})]}),banner:{key:"whisper-release",text:(0,a.jsxs)("span",{children:["\uD83C\uDF89 Try Whisper Chat online →"," ",(0,a.jsx)("a",{href:"https://whisper.ukehome.top",children:"whisper"})]})},primaryHue:{dark:260,light:180},navigation:{prev:!0,next:!0},darkMode:!0,nextThemes:{defaultTheme:"system"}};r.Z=s},5789:function(){}},function(e){e.O(0,[2114,2888,9774,179],function(){return e(e.s=4670)}),_N_E=e.O()}]);