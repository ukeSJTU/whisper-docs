(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4193],{6606:function(e,i,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/encrypt",function(){return n(858)}])},858:function(e,i,n){"use strict";n.r(i),n.d(i,{__toc:function(){return t}});var l=n(5893),r=n(2673),s=n(5417),c=n(3209);n(4759);var d=n(2643),o=n(8902);let t=[{depth:2,value:"概述",id:"概述"},{depth:3,value:"流程详解",id:"流程详解"},{depth:3,value:"阶段 0: Bob 的设置与公钥包上传 (一次性或不经常进行)",id:"阶段-0-bob-的设置与公钥包上传-一次性或不经常进行"},{depth:3,value:"阶段 1: Alice 获取 Bob 的公钥包",id:"阶段-1-alice-获取-bob-的公钥包"},{depth:3,value:"阶段 2: Alice 计算共享密钥(SK)",id:"阶段-2-alice-计算共享密钥sk"},{depth:3,value:"阶段 3: Alice 发送初始消息给服务器",id:"阶段-3-alice-发送初始消息给服务器"},{depth:3,value:"阶段 4 & 5: Bob 接收初始消息，计算 SK，并解密",id:"阶段-4--5-bob-接收初始消息计算-sk并解密"},{depth:3,value:"阶段 6: 双棘轮初始化和后续通信",id:"阶段-6-双棘轮初始化和后续通信"}];function _(e){let i=Object.assign({h1:"h1",h2:"h2",p:"p",strong:"strong",code:"code",ul:"ul",li:"li",h3:"h3",ol:"ol"},(0,d.a)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.h1,{children:"一对一聊天 (Private Chat with Signal Protocol)"}),"\n",(0,l.jsx)(i.h2,{id:"概述",children:"概述"}),"\n",(0,l.jsxs)(i.p,{children:["本部分详细阐述了基于 Signal 协议的端到端加密（E2EE）私聊机制。它首先通过 ",(0,l.jsx)(i.strong,{children:"X3DH (Extended Triple Diffie-Hellman) 密钥协商协议"}),"在通信双方（例如 Alice 和 Bob）之间安全地建立一个初始共享密钥 ",(0,l.jsx)(i.code,{children:"SK"}),"。随后，此 ",(0,l.jsx)(i.code,{children:"SK"})," 将用于初始化",(0,l.jsx)(i.strong,{children:"双棘轮 (Double Ratchet) 算法"}),"，为后续的持续通信提供前向保密和后向保密（或称破坏后恢复安全）。"]}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:"核心密钥类型回顾："})}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"身份密钥 (IK)"}),": 每个用户拥有一对长期的 ",(0,l.jsx)(i.strong,{children:"Ed25519"})," 密钥对。",(0,l.jsx)(i.code,{children:"IK_pub"})," 用于身份声明和验证签名预共享密钥 (SPK)；",(0,l.jsx)(i.code,{children:"IK_priv"})," 用于签名 SPK。在 X3DH 中，当 IK 需要参与 DH 运算时，其公钥会被转换为 X25519 形式，其私钥会以对应的 X25519 私钥标量形式参与。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"签名预共享密钥 (SPK)"}),": 一对中期的 ",(0,l.jsx)(i.strong,{children:"X25519"})," 密钥对，其公钥被 IK 签名。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"一次性预共享密钥 (OPK)"}),": 一批一次性的 ",(0,l.jsx)(i.strong,{children:"X25519"})," 密钥对。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"临时密钥 (EK)"}),": 由会话发起方（Alice）为单次 X3DH 交换生成的 ",(0,l.jsx)(i.strong,{children:"X25519"})," 密钥对。"]}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"流程详解",children:"流程详解"}),"\n",(0,l.jsx)(o.Z,{id:"private-chat-sequence",content:'\nsequenceDiagram\n    participant AliceClient as Alice客户端\n    participant Server as 服务器\n    participant BobClient as Bob客户端\n\n    %% --- Bob\'s Setup Phase ---\n    Note over BobClient, Server: 阶段0: Bob的设置与公钥包上传\n    BobClient->>BobClient: 生成IK_B (Ed25519), SPK_B (X25519), OPKs_B (X25519)\n    BobClient->>BobClient: 用IK_B_priv签名SPK_B_pub得到Signature_SPK_B\n    BobClient->>+Server: UPLOAD_PREKEY_BUNDLE_REQUEST <br> (含IK_B_Ed25519_pub, <br> SPK_B_X25519_pub + ID, <br> Signature_SPK_B, <br> OPKs_B_X25519_pub_list + IDs)\n    Server-->>-BobClient: UPLOAD_PREKEY_BUNDLE_RESPONSE (成功)\n\n    %% --- Alice Initiates Chat with Bob ---\n    Note over AliceClient, Server: 阶段1: Alice 获取 Bob 的公钥包\n    AliceClient->>+Server: GET_PREKEY_BUNDLE_REQUEST (请求Bob的公钥包)\n    Server-->>-AliceClient: GET_PREKEY_BUNDLE_RESPONSE <br> (含Bob的IK_B_Ed25519_pub, <br> SPK_B_X25519_pub + ID, <br> Signature_SPK_B, <br> 一个OPK_B_X25519_pub + ID (如果可用))\n    Server->>Server: (标记Bob的此OPK为已使用)\n\n    Note over AliceClient: 阶段2: Alice 计算共享密钥(SK)\n    AliceClient->>AliceClient: 验证SPK_B的签名 (使用IK_B_Ed25519_pub)\n    AliceClient->>AliceClient: 生成自己的临时密钥EK_A (X25519)\n    AliceClient->>AliceClient: 转换IK_B_Ed25519_pub为IK_B_X25519_pub_form\n    AliceClient->>AliceClient: 执行X3DH运算 (用IK_A_X25519_priv_form, EK_A_priv与Bob的公钥) 得到DH1,DH2,DH3,DH4\n    AliceClient->>AliceClient: IKM = F || DH1 || DH2 || DH3 || DH4\n    AliceClient->>AliceClient: SK = HKDF(IKM)\n    AliceClient->>AliceClient: MK_initial = KDF_MsgKey(SK)\n    AliceClient->>AliceClient: Ciphertext_initial = Encrypt(MK_initial, 原始消息_A)\n\n    Note over AliceClient, Server: 阶段3: Alice 发送初始消息给服务器\n    AliceClient->>+Server: SEND_PRIVATE_MESSAGE_REQUEST <br> (收件人:Bob, content: { <br> type: "prekey", <br> body: Ciphertext_initial_b64, <br> IK_A_Ed25519_pub_b64, <br> EK_A_X25519_pub_b64, <br> SPK_B_id_used, <br> OPK_B_id_used (如果使用) <br> })\n    Server-->>-AliceClient: MESSAGE_SENT_ACK\n\n    %% --- Bob Receives and Establishes Session ---\n    Note over Server, BobClient: 阶段4: 服务器转发初始消息给 Bob\n    Server->>+BobClient: RECEIVE_PRIVATE_MESSAGE_NOTIFICATION <br> (来自Alice, content: { type:"prekey", ...同上... })\n\n    Note over BobClient: 阶段5: Bob 计算共享密钥(SK)并解密\n    BobClient->>BobClient: 提取Alice的IK_A_Ed25519_pub, EK_A_X25519_pub\n    BobClient->>BobClient: 转换IK_A_Ed25519_pub为IK_A_X25519_pub_form\n    BobClient->>BobClient: 获取自己的IK_B_X25519_priv_form, SPK_B_priv (据ID), OPK_B_priv (据ID, 并删除此OPK)\n    BobClient->>BobClient: 执行X3DH运算得到DH1,DH2,DH3,DH4\n    BobClient->>BobClient: IKM = F || DH1 || DH2 || DH3 || DH4\n    BobClient->>BobClient: SK = HKDF(IKM) (与Alice的SK相同)\n    BobClient->>BobClient: MK_initial = KDF_MsgKey(SK)\n    BobClient->>BobClient: 原始消息_A = Decrypt(MK_initial, Ciphertext_initial_from_body)\n\n    Note over AliceClient, BobClient: 阶段6: 双棘轮初始化和后续通信\n    AliceClient->>AliceClient: 使用SK和Bob的SPK_B_pub(或OPK_B_pub)初始化Alice的发送棘轮和Bob的接收棘轮\n    BobClient->>BobClient: 使用SK和Alice的EK_A_pub初始化Bob的发送棘轮和Alice的接收棘轮\n    BobClient->>BobClient: Bob生成新的DHR_B用于回复\n    BobClient->>AliceClient: (通过服务器) 发送第一条棘轮消息 (包含DHR_B_pub)\n    AliceClient->>BobClient: (通过服务器) 后续棘轮消息\n'}),"\n",(0,l.jsx)(i.h3,{id:"阶段-0-bob-的设置与公钥包上传-一次性或不经常进行",children:"阶段 0: Bob 的设置与公钥包上传 (一次性或不经常进行)"}),"\n",(0,l.jsxs)(i.p,{children:["在 Alice 能够联系 Bob 之前，Bob 的客户端（例如通过 ",(0,l.jsx)(i.code,{children:"SignalKeyStore"})," 和 ",(0,l.jsx)(i.code,{children:"SignalProtocolManager"}),"）需要完成以下操作："]}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.strong,{children:"生成各类密钥对"}),"："]}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"身份密钥对 (IK_B)"}),"：一对长期的 ",(0,l.jsx)(i.code,{children:"Ed25519PrivateKey"})," 和 ",(0,l.jsx)(i.code,{children:"Ed25519PublicKey"}),"。"]}),"\n",(0,l.jsxs)(i.li,{children:["(为了 X3DH) Bob 的客户端还需要能够从 ",(0,l.jsx)(i.code,{children:"IK_B_Ed25519_priv"})," 的种子派生出对应的 ",(0,l.jsx)(i.strong,{children:"X25519 私钥标量"})," (",(0,l.jsx)(i.code,{children:"IK_B_X25519_priv_scalar"}),")。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"签名预共享密钥对 (SPK_B)"}),"：一对中期的 ",(0,l.jsx)(i.code,{children:"X25519PrivateKey"})," 和 ",(0,l.jsx)(i.code,{children:"X25519PublicKey"}),"，并为其分配一个整数 ID (",(0,l.jsx)(i.code,{children:"SPK_B_id"}),")。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"对 SPK_B 的签名"}),"：使用 ",(0,l.jsx)(i.code,{children:"IK_B_Ed25519_priv"})," 对 ",(0,l.jsx)(i.code,{children:"SPK_B_X25519_pub"})," 的字节进行签名，得到 ",(0,l.jsx)(i.code,{children:"Signature_SPK_B"}),"。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"一次性预共享密钥对 (OPK_B)"}),"：生成一批（例如 100 个）一次性的 ",(0,l.jsx)(i.code,{children:"X25519PrivateKey"})," 和 ",(0,l.jsx)(i.code,{children:"X25519PublicKey"})," 对，并为每个公钥分配一个唯一的整数 ID (",(0,l.jsx)(i.code,{children:"OPK_B_i_id"}),")。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:["\n",(0,l.jsxs)(i.p,{children:[(0,l.jsx)(i.strong,{children:"上传公钥包至服务器"}),"：Bob 的客户端将以下公钥信息打包发送给服务器存储。服务器",(0,l.jsx)(i.strong,{children:"绝不存储任何私钥"}),"。"]}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"IK_B_Ed25519_pub"})," (Bob 的 Ed25519 公共身份密钥)"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"SPK_B_X25519_pub"})," (Bob 的 X25519 公共签名预共享密钥)"]}),"\n",(0,l.jsx)(i.li,{children:(0,l.jsx)(i.code,{children:"SPK_B_id"})}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"Signature_SPK_B"})," (对 SPK_B_pub 的签名)"]}),"\n",(0,l.jsxs)(i.li,{children:["一个列表，包含所有公共一次性预共享密钥 (",(0,l.jsx)(i.code,{children:"OPK_B_i_X25519_pub"}),") 及其对应的 ",(0,l.jsx)(i.code,{children:"OPK_B_i_id"}),"。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"阶段-1-alice-获取-bob-的公钥包",children:"阶段 1: Alice 获取 Bob 的公钥包"}),"\n",(0,l.jsx)(i.p,{children:"当 Alice 想要和 Bob 开始加密聊天时："}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsx)(i.li,{children:"Alice 的客户端向服务器请求 Bob 的公共预共享密钥包。"}),"\n",(0,l.jsxs)(i.li,{children:["服务器查找 Bob 的记录，并执行以下操作：","\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["提取 Bob 的 ",(0,l.jsx)(i.code,{children:"IK_B_Ed25519_pub"}),", ",(0,l.jsx)(i.code,{children:"SPK_B_X25519_pub"}),", ",(0,l.jsx)(i.code,{children:"SPK_B_id"}),", 和 ",(0,l.jsx)(i.code,{children:"Signature_SPK_B"}),"。"]}),"\n",(0,l.jsxs)(i.li,{children:["从 Bob 的可用 OPK 列表中选择一个 ",(0,l.jsx)(i.code,{children:"OPK_B_X25519_pub"})," 及其 ",(0,l.jsx)(i.code,{children:"OPK_B_id"}),"（如果还有可用的话）。"]}),"\n",(0,l.jsx)(i.li,{children:"将这个被选中的 OPK 从 Bob 的可用列表中移除或标记为已使用。"}),"\n",(0,l.jsx)(i.li,{children:"将上述所有公钥信息返回给 Alice 的客户端。"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"阶段-2-alice-计算共享密钥sk",children:"阶段 2: Alice 计算共享密钥(SK)"}),"\n",(0,l.jsxs)(i.p,{children:["Alice 的客户端（例如其内部的 ",(0,l.jsx)(i.code,{children:"X3DHProtocol"})," 模块）现在拥有："]}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["她自己的密钥：",(0,l.jsx)(i.code,{children:"IK_A_Ed25519_priv"})," (及其对应的 ",(0,l.jsx)(i.code,{children:"IK_A_X25519_priv_scalar"}),")。"]}),"\n",(0,l.jsx)(i.li,{children:"Bob 的公钥包中的信息。"}),"\n"]}),"\n",(0,l.jsx)(i.p,{children:"Alice 执行以下步骤："}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"验证 Bob 的 SPK 签名"}),"：Alice 使用获取到的 ",(0,l.jsx)(i.code,{children:"IK_B_Ed25519_pub"})," 来验证 ",(0,l.jsx)(i.code,{children:"Signature_SPK_B"})," 对于 ",(0,l.jsx)(i.code,{children:"SPK_B_X25519_pub"})," 的有效性。如果签名无效，则流程中止，因为 Bob 的密钥包可能已被篡改或来源不可信。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"生成 Alice 的临时密钥 (EK_A)"}),"：Alice 生成一对全新的 X25519 临时密钥对 (",(0,l.jsx)(i.code,{children:"EK_A_X25519_priv"}),", ",(0,l.jsx)(i.code,{children:"EK_A_X25519_pub"}),")，仅用于本次会话建立。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"进行公钥转换"}),"：Alice 使用你实现的转换函数，将从 Bob 密钥包中获取的 ",(0,l.jsx)(i.code,{children:"IK_B_Ed25519_pub"})," 转换为其对应的 ",(0,l.jsx)(i.strong,{children:"X25519 公钥形式"})," (",(0,l.jsx)(i.code,{children:"IK_B_X25519_pub_form"}),")。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"执行 X3DH 运算"}),"：","\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:(0,l.jsx)(i.code,{children:"DH1 = X25519(IK_A_X25519_priv_scalar, SPK_B_X25519_pub)"})}),"\n",(0,l.jsx)(i.li,{children:(0,l.jsx)(i.code,{children:"DH2 = X25519(EK_A_X25519_priv, IK_B_X25519_pub_form)"})}),"\n",(0,l.jsx)(i.li,{children:(0,l.jsx)(i.code,{children:"DH3 = X25519(EK_A_X25519_priv, SPK_B_X25519_pub)"})}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"DH4 = X25519(EK_A_X25519_priv, OPK_B_X25519_pub)"})," (如果 Bob 提供了 OPK 并且 Alice 使用了它)"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"构造输入密钥材料 (IKM)"}),"：Alice 将一个标准定义的固定前缀字节串 ",(0,l.jsx)(i.code,{children:"F"}),"（例如 32 个 ",(0,l.jsx)(i.code,{children:"\\xff"})," 字节）与上述 DH 运算结果按照 Signal 协议规定的",(0,l.jsx)(i.strong,{children:"固定顺序"}),"拼接起来：\n",(0,l.jsx)(i.code,{children:"IKM = F || DH1 || DH2 || DH3 || DH4"})," (如果 DH4 不存在则不包含)。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"派生共享密钥 (SK)"}),"：Alice 使用 HKDF（基于 HMAC 的密钥派生函数）从 IKM 派生出最终的 32 字节共享密钥 ",(0,l.jsx)(i.code,{children:"SK"}),"。HKDF 的 salt 和 info 参数也应使用 Signal 协议规范中的标准值。\n",(0,l.jsx)(i.code,{children:"SK = HKDF(salt_spec, IKM, info_spec, 32)"})]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"派生初始消息密钥 (MK_initial)"}),"：通常，",(0,l.jsx)(i.code,{children:"SK"})," 不会直接用于加密第一条消息，而是会再次通过 KDF（例如 HKDF 的扩展阶段，使用不同的 info）派生出一个或多个用于实际加密的初始消息密钥和相关的认证数据密钥。为简化，我们称之为 ",(0,l.jsx)(i.code,{children:"MK_initial"}),"。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"加密第一条消息"}),"：Alice 使用 ",(0,l.jsx)(i.code,{children:"MK_initial"})," 和 AEAD 对称加密算法（如 AES-GCM，为每条消息使用唯一的 Nonce）加密她的第一条消息，得到密文。"]}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"阶段-3-alice-发送初始消息给服务器",children:"阶段 3: Alice 发送初始消息给服务器"}),"\n",(0,l.jsxs)(i.p,{children:["Alice 的客户端构建一个初始的“预共享密钥消息”（PreKey Message）。根据我们之前讨论的协议，这会是一个 ",(0,l.jsx)(i.code,{children:"MessageContent"})," 对象，其 ",(0,l.jsx)(i.code,{children:"type"})," 字段为 ",(0,l.jsx)(i.code,{children:'"prekey"'}),"。该对象的 ",(0,l.jsx)(i.code,{children:"body"})," 包含加密后的第一条消息密文，并且对象内部还需要包含以下",(0,l.jsx)(i.strong,{children:"由 Alice 提供的、Bob 建立会话所需的公钥信息和 ID"}),"："]}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"sender_identity_public_key"}),": Alice 的 ",(0,l.jsx)(i.code,{children:"IK_A_Ed25519_pub"})," (Base64 编码)。Bob 需要用它来（在未来，如果 Alice 也发布 SPK）验证 Alice 的密钥。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"sender_ephemeral_public_key"}),": Alice 的 ",(0,l.jsx)(i.code,{children:"EK_A_X25519_pub"})," (Base64 编码)。Bob 的核心 DH 运算需要它。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"recipient_signed_pre_key_id"}),": Alice 所使用的 Bob 的 ",(0,l.jsx)(i.code,{children:"SPK_B_id"}),"。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"recipient_one_time_pre_key_id"}),": Alice 所使用的 Bob 的 ",(0,l.jsx)(i.code,{children:"OPK_B_id"}),"（如果使用了）。"]}),"\n"]}),"\n",(0,l.jsxs)(i.p,{children:["Alice 将此 ",(0,l.jsx)(i.code,{children:"MessageContent"})," 对象包装在 ",(0,l.jsx)(i.code,{children:"SEND_PRIVATE_MESSAGE_REQUEST"})," 中发送给服务器，服务器简单地将此请求的 ",(0,l.jsx)(i.code,{children:"payload.content"})," 部分转发给 Bob。"]}),"\n",(0,l.jsx)(i.h3,{id:"阶段-4--5-bob-接收初始消息计算-sk并解密",children:"阶段 4 & 5: Bob 接收初始消息，计算 SK，并解密"}),"\n",(0,l.jsxs)(i.p,{children:["Bob 的客户端收到服务器转发来的包含上述 ",(0,l.jsx)(i.code,{children:'type="prekey"'})," 的 ",(0,l.jsx)(i.code,{children:"MessageContent"})," 对象。"]}),"\n",(0,l.jsxs)(i.ol,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"提取信息"}),"：Bob 从消息中提取出 Alice 的 ",(0,l.jsx)(i.code,{children:"IK_A_Ed25519_pub"}),"、",(0,l.jsx)(i.code,{children:"EK_A_X25519_pub"}),"，以及他自己被 Alice 使用的 ",(0,l.jsx)(i.code,{children:"SPK_B_id_used"})," 和 ",(0,l.jsx)(i.code,{children:"OPK_B_id_used"}),"。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"获取自己的私钥"}),"：Bob 的客户端从其本地 ",(0,l.jsx)(i.code,{children:"SignalKeyStore"})," 中获取：","\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["他自己的 ",(0,l.jsx)(i.code,{children:"IK_B_Ed25519_priv"}),"（并从中派生出 ",(0,l.jsx)(i.code,{children:"IK_B_X25519_priv_scalar"}),"）。"]}),"\n",(0,l.jsxs)(i.li,{children:["与 ",(0,l.jsx)(i.code,{children:"SPK_B_id_used"})," 对应的 ",(0,l.jsx)(i.code,{children:"SPK_B_X25519_priv"}),"。"]}),"\n",(0,l.jsxs)(i.li,{children:["如果 ",(0,l.jsx)(i.code,{children:"OPK_B_id_used"})," 存在，获取对应的 ",(0,l.jsx)(i.code,{children:"OPK_B_X25519_priv"}),"。获取后，Bob 的客户端应将此 OPK 从可用池中永久删除。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"进行公钥转换"}),"：Bob 使用你实现的转换函数，将消息中 Alice 的 ",(0,l.jsx)(i.code,{children:"IK_A_Ed25519_pub"})," 转换为其对应的 ",(0,l.jsx)(i.strong,{children:"X25519 公钥形式"})," (",(0,l.jsx)(i.code,{children:"IK_A_X25519_pub_form"}),")。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"执行 X3DH 运算"}),"：Bob 使用自己的私钥和 Alice 的公钥（包括转换后的",(0,l.jsx)(i.code,{children:"IK_A_X25519_pub_form"}),"和",(0,l.jsx)(i.code,{children:"EK_A_X25519_pub"}),"）进行与 Alice 完全相同的四组（或三组）DH 运算。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"构造 IKM 并派生 SK"}),"：Bob 按照与 Alice",(0,l.jsx)(i.strong,{children:"完全相同的固定顺序和前缀 F"}),"拼接 DH 结果，得到 IKM，然后使用",(0,l.jsx)(i.strong,{children:"完全相同的 HKDF 参数"}),"派生出共享密钥 ",(0,l.jsx)(i.code,{children:"SK"}),"。","\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsx)(i.li,{children:(0,l.jsxs)(i.strong,{children:["此时，Bob 计算出的 ",(0,l.jsx)(i.code,{children:"SK"})," 将与 Alice 计算出的 ",(0,l.jsx)(i.code,{children:"SK"})," 完全一致！"]})}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"派生并使用初始消息密钥解密"}),"：Bob 同样从 ",(0,l.jsx)(i.code,{children:"SK"})," 派生出 ",(0,l.jsx)(i.code,{children:"MK_initial"}),"，然后用它解密 ",(0,l.jsx)(i.code,{children:"MessageContent.body"})," 中的密文，得到 Alice 发送的第一条明文消息。"]}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"阶段-6-双棘轮初始化和后续通信",children:"阶段 6: 双棘轮初始化和后续通信"}),"\n",(0,l.jsxs)(i.p,{children:["一旦双方都拥有了相同的共享密钥 ",(0,l.jsx)(i.code,{children:"SK"}),"，他们就可以用它来初始化双棘轮会话状态。"]}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsxs)(i.strong,{children:[(0,l.jsx)(i.code,{children:"SK"})," 作为第一个根密钥 (RootKey, RK0)"]}),"。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"Alice 的初始状态"}),"：","\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["她的第一个发送棘轮公钥（",(0,l.jsx)(i.code,{children:"DHRs_A"}),"）就是她在 X3DH 中生成的 ",(0,l.jsx)(i.code,{children:"EK_A_X25519_pub"}),"。"]}),"\n",(0,l.jsxs)(i.li,{children:["她需要 Bob 的初始棘轮公钥来初始化她的接收链。Bob 的这个公钥将在 Bob 的第一条回复消息中携带。在收到 Bob 的回复前，Alice 的接收链是基于 ",(0,l.jsx)(i.code,{children:"DH(IK_A_X_form, Bob的被选PreKey_pub)"})," 或 ",(0,l.jsx)(i.code,{children:"DH(EK_A_priv, Bob的被选PreKey_pub)"})," 等（具体取决于 Signal 棘轮的精确初始化步骤，通常是基于 Bob 的 SPK 或 OPK）。"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.strong,{children:"Bob 的初始状态"}),"：","\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["他收到了 Alice 的 ",(0,l.jsx)(i.code,{children:"EK_A_X25519_pub"}),"，这成为他的第一个",(0,l.jsxs)(i.strong,{children:["接收棘轮公钥 (",(0,l.jsx)(i.code,{children:"DHRrcv_A"}),")"]}),"。"]}),"\n",(0,l.jsxs)(i.li,{children:["为了回复 Alice，Bob 会生成他自己的",(0,l.jsxs)(i.strong,{children:["第一个发送棘轮密钥对 (",(0,l.jsx)(i.code,{children:"DHRs_B_pair"}),")"]}),"。其公钥 ",(0,l.jsx)(i.code,{children:"DHRs_B_pub"})," 将包含在他发送给 Alice 的第一条棘轮消息中。"]}),"\n",(0,l.jsxs)(i.li,{children:["然后，Bob 使用 ",(0,l.jsx)(i.code,{children:"RK0"})," (即",(0,l.jsx)(i.code,{children:"SK"}),") 和 ",(0,l.jsx)(i.code,{children:"DH(DHRs_B_priv, DHRrcv_A)"})," 的结果，通过 KDF 派生出他自己的初始发送链密钥 (CKs_B) 和接收链密钥 (CKr_B)。"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(i.p,{children:(0,l.jsx)(i.strong,{children:"“棘轮状态同步”的关键在于："})}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["双方通过 X3DH 安全地协商出相同的 ",(0,l.jsx)(i.code,{children:"SK"}),"。"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"SK"})," 作为双棘轮的第一个根密钥。"]}),"\n",(0,l.jsxs)(i.li,{children:["双方都知道对方用于开始双棘轮的第一个棘轮公钥（Alice 的是她的",(0,l.jsx)(i.code,{children:"EK_A_pub"}),"，Bob 则在他回复第一条消息时生成并发送他自己的第一个棘轮公钥 ",(0,l.jsx)(i.code,{children:"DHRs_B_pub"}),"）。"]}),"\n",(0,l.jsx)(i.li,{children:"基于这些信息，双方各自初始化发送链和接收链，双棘轮开始运作。之后，每条消息的发送和接收都会驱动棘轮前进，不断生成新的消息密钥。"}),"\n"]}),"\n",(0,l.jsxs)(i.p,{children:["这个过程确保了即使初始的 ",(0,l.jsx)(i.code,{children:"SK"})," 或某个阶段的密钥泄露，由于棘轮机制（特别是 DH 棘轮），未来的消息仍能保持其机密性（前向保密），并且过去的通信在一定程度上也能得到保护。实现这些需要对 Signal 协议规范的精确理解和严谨编程。"]})]})}let h={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:i}=Object.assign({},(0,d.a)(),e.components);return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(_,{...e})}):_(e)},pageOpts:{filePath:"pages/encrypt.mdx",route:"/encrypt",timestamp:1749082044e3,pageMap:[{kind:"Meta",data:{index:{title:"Introduction",type:"page",display:"hidden"},demo:{title:"Demo & Introduction",type:"page"},protocol:{title:"Protocol",type:"page"},sequence:{title:"Sequence Flow",type:"page"},database:{title:"Database Design",type:"page"},uml:{title:"UML Structure",type:"page"},"stress-test":{title:"Stress Testing",type:"page",display:"hidden"},encrypt:{title:"Encrypt",type:"page"}}},{kind:"MdxPage",name:"database",route:"/database"},{kind:"MdxPage",name:"demo",route:"/demo"},{kind:"MdxPage",name:"encrypt",route:"/encrypt"},{kind:"MdxPage",name:"index",route:"/"},{kind:"MdxPage",name:"protocol",route:"/protocol"},{kind:"MdxPage",name:"sequence",route:"/sequence"},{kind:"MdxPage",name:"stress-test",route:"/stress-test"},{kind:"MdxPage",name:"uml",route:"/uml"}],flexsearch:{codeblocks:!0},readingTime:{text:"11 min read",minutes:10.785,time:647100,words:2157},title:"一对一聊天 (Private Chat with Signal Protocol)",headings:t},pageNextRoute:"/encrypt",nextraLayout:s.ZP,themeConfig:c.Z};i.default=(0,r.j)(h)},8902:function(e,i,n){"use strict";var l=n(5893),r=n(2010),s=n(7294);i.Z=e=>{let{id:i,content:c}=e,{resolvedTheme:d}=(0,r.F)(),[o,t]=(0,s.useState)(null),_=(0,s.useRef)(null);return(0,s.useEffect)(()=>{Promise.all([n.e(7163),n.e(3542),n.e(6637)]).then(n.bind(n,6637)).then(e=>{e.default.initialize({startOnLoad:!0,theme:"forest",flowchart:{useMaxWidth:!0,htmlLabels:!0},sequence:{diagramMarginX:50,diagramMarginY:10,actorMargin:80,width:150,height:65,boxMargin:10,boxTextMargin:5,noteMargin:10,messageMargin:35,mirrorActors:!0},class:{diagramPadding:8,useMaxWidth:!0}});try{e.default.render("mermaid-".concat(i),c).then(e=>{let{svg:i}=e;t(i)})}catch(e){console.error("Error rendering mermaid diagram:",e),t('<div class="p-4 text-red-500">Error rendering diagram</div>')}})},[c,i,"dark"===d]),(0,s.useEffect)(()=>{o&&_.current&&(_.current.innerHTML=o)},[o]),(0,l.jsx)("div",{className:"my-8 overflow-x-auto rounded-lg p-4 shadow-sm",children:(0,l.jsx)("div",{ref:_,className:"mermaid flex justify-center"})})}},3209:function(e,i,n){"use strict";var l=n(5893),r=n(7656),s=n(1163);let c={logo:(0,l.jsxs)("div",{className:"flex items-center",children:[(0,l.jsx)(r.Z,{size:24,className:"mr-2"}),(0,l.jsx)("span",{className:"font-bold text-xl",children:"Whisper Chat"})]}),project:{link:"https://github.com/ukeSJTU/whisper"},docsRepositoryBase:"https://github.com/ukeSJTU/whisper-docs",footer:{text:(0,l.jsxs)("span",{children:["\xa9 ",new Date().getFullYear()," Whisper Chat. All rights reserved."]})},useNextSeoProps(){let{asPath:e}=(0,s.useRouter)();return{titleTemplate:"/"!==e?"%s – Whisper Chat":"Whisper Chat - Secure Real-Time Communication",description:"Whisper is a modern, secure web-based chat application for real-time communication."}},head:(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1.0"}),(0,l.jsx)("meta",{name:"description",content:"Whisper is a modern, secure web-based chat application for real-time communication."}),(0,l.jsx)("meta",{name:"og:title",content:"Whisper Chat"}),(0,l.jsx)("link",{rel:"icon",href:"/favicon.ico"})]}),banner:{key:"whisper-release",text:(0,l.jsxs)("span",{children:["\uD83C\uDF89 Try Whisper Chat online →"," ",(0,l.jsx)("a",{href:"https://whisper.ukehome.top",children:"whisper"})]})},primaryHue:{dark:260,light:180},navigation:{prev:!0,next:!0},darkMode:!0,nextThemes:{defaultTheme:"system"}};i.Z=c},5789:function(){}},function(e){e.O(0,[2114,2888,9774,179],function(){return e(e.s=6606)}),_N_E=e.O()}]);