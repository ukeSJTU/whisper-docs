(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[302],{6806:function(e,r,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/sequences/group_chat",function(){return n(4847)}])},4847:function(e,r,n){"use strict";n.r(r),n.d(r,{__toc:function(){return l}});var a=n(5893),t=n(2673),i=n(5417),s=n(3209);n(4759);var p=n(2643),o=n(8757);let l=[];function d(e){return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o.G,{chart:"sequenceDiagram\n    participant ClientApp as Client Application\n    participant ClientService as Client GroupChatService\n    participant ClientHandler as Client GroupChatHandler\n    participant ServerHandler as Server GroupChatHandler\n    participant ServerStorage as Server Storage\n    participant GroupMembers as Other Group Members\n\n    Note over ClientApp, GroupMembers: Group Creation\n    ClientApp->>ClientService: create_group(name, description)\n    ClientService->>ServerHandler: CREATE_GROUP_REQUEST\n    ServerHandler->>ServerStorage: create_group(group_name, creator_user_id, group_description)\n    ServerStorage-->>ServerHandler: Group object or None\n    alt Creation Success\n        ServerHandler-->>ClientService: CREATE_GROUP_RESPONSE (success=true, group_id, group_name, group_description)\n        ClientService->>ClientHandler: handle_create_group_response(message)\n        ClientHandler->>ClientApp: Update UI (created group details)\n    else Creation Failure\n        ServerHandler-->>ClientService: CREATE_GROUP_RESPONSE (success=false, message)\n        ClientService->>ClientHandler: handle_create_group_response(message)\n        ClientHandler->>ClientApp: Update UI (error message)\n    end"}),"\n",(0,a.jsx)(o.G,{chart:"sequenceDiagram\n    participant ClientApp as Client Application\n    participant ClientService as Client GroupChatService\n    participant ClientHandler as Client GroupChatHandler\n    participant ServerHandler as Server GroupChatHandler\n    participant ServerStorage as Server Storage\n    participant GroupMembers as Other Group Members\n\n    Note over ClientApp, GroupMembers: Group Information Management\n    ClientApp->>ClientService: update_group_info(group_id, name, description)\n    ClientService->>ServerHandler: UPDATE_GROUP_INFO_REQUEST\n    ServerHandler->>ServerStorage: update_group_info(group_id, group_name, group_description)\n    ServerStorage-->>ServerHandler: success or failure\n    alt Update Success\n        ServerHandler-->>ClientService: UPDATE_GROUP_INFO_RESPONSE (success=true, group_id, group_name, group_description)\n        ServerHandler->>GroupMembers: GROUP_INFO_UPDATED_NOTIFICATION (group_id, updated_by_user_id, updated_by_username, new values)\n        ClientService->>ClientHandler: handle_update_group_info_response(message)\n        ClientHandler->>ClientApp: Update UI (updated group details)\n        GroupMembers->>ClientHandler: handle_group_info_updated_notification(message)\n        ClientHandler->>ClientApp: Update UI for members (updated group details)\n    else Update Failure\n        ServerHandler-->>ClientService: UPDATE_GROUP_INFO_RESPONSE (success=false, message)\n        ClientService->>ClientHandler: handle_update_group_info_response(message)\n        ClientHandler->>ClientApp: Update UI (error message)\n    end"}),"\n",(0,a.jsx)(o.G,{chart:"sequenceDiagram\n    participant ClientApp as Client Application\n    participant ClientService as Client GroupChatService\n    participant ClientHandler as Client GroupChatHandler\n    participant ServerHandler as Server GroupChatHandler\n    participant ServerStorage as Server Storage\n    participant GroupMembers as Other Group Members\n\n    Note over ClientApp, GroupMembers: Group Membership Management\n\n    Note over ClientApp, GroupMembers: Joining a Group\n    ClientApp->>ClientService: join_group(group_id)\n    ClientService->>ServerHandler: JOIN_GROUP_REQUEST\n    ServerHandler->>ServerStorage: add_user_to_group(group_id, user_id)\n    ServerStorage-->>ServerHandler: success or failure\n    alt Join Success\n        ServerHandler-->>ClientService: JOIN_GROUP_RESPONSE (success=true, group_id, group_name)\n        ServerHandler->>GroupMembers: USER_JOINED_GROUP_NOTIFICATION (group_id, joined_user_id, joined_username)\n        ClientService->>ClientHandler: handle_join_group_response(message)\n        ClientHandler->>ClientApp: Update UI (joined group details)\n        GroupMembers->>ClientHandler: handle_user_joined_group_notification(message)\n        ClientHandler->>ClientApp: Update UI for members (new member)\n    else Join Failure\n        ServerHandler-->>ClientService: JOIN_GROUP_RESPONSE (success=false, message)\n        ClientService->>ClientHandler: handle_join_group_response(message)\n        ClientHandler->>ClientApp: Update UI (error message)\n    end\n\n    Note over ClientApp, GroupMembers: Leaving a Group\n    ClientApp->>ClientService: leave_group(group_id)\n    ClientService->>ServerHandler: LEAVE_GROUP_REQUEST\n    ServerHandler->>ServerStorage: remove_user_from_group(group_id, user_id)\n    ServerStorage-->>ServerHandler: success or failure\n    alt Leave Success\n        ServerHandler-->>ClientService: LEAVE_GROUP_RESPONSE (success=true, group_id)\n        ServerHandler->>GroupMembers: USER_LEFT_GROUP_NOTIFICATION (group_id, left_user_id, left_username)\n        ClientService->>ClientHandler: handle_leave_group_response(message)\n        ClientHandler->>ClientApp: Update UI (removed group)\n        GroupMembers->>ClientHandler: handle_user_left_group_notification(message)\n        ClientHandler->>ClientApp: Update UI for members (removed member)\n    else Leave Failure\n        ServerHandler-->>ClientService: LEAVE_GROUP_RESPONSE (success=false, message)\n        ClientService->>ClientHandler: handle_leave_group_response(message)\n        ClientHandler->>ClientApp: Update UI (error message)\n    end\n\n    Note over ClientApp, GroupMembers: Getting User's Groups\n    ClientApp->>ClientService: get_my_groups()\n    ClientService->>ServerHandler: GET_MY_GROUPS_REQUEST\n    ServerHandler->>ServerStorage: get_user_groups(user_id)\n    ServerStorage-->>ServerHandler: list of groups\n    ServerHandler-->>ClientService: GET_MY_GROUPS_RESPONSE (success, groups[])\n    ClientService->>ClientHandler: handle_get_my_groups_response(message)\n    ClientHandler->>ClientApp: Update UI (list of groups)"}),"\n",(0,a.jsx)(o.G,{chart:"sequenceDiagram\n    participant SenderApp as Sender Application\n    participant SenderService as Sender GroupChatService\n    participant SenderHandler as Sender GroupChatHandler\n    participant ServerHandler as Server GroupChatHandler\n    participant ServerStorage as Server Storage\n    participant ReceiverHandler as Receiver GroupChatHandler\n    participant ReceiverApp as Receiver Application\n\n    Note over SenderApp, ReceiverApp: Group Message Exchange\n\n    Note over SenderApp, ReceiverApp: Sending Group Message\n    SenderApp->>SenderService: send_group_chat_message(group_id, message)\n    SenderService->>ServerHandler: SEND_GROUP_CHAT_MESSAGE_REQUEST (group_id, content, client_message_id)\n    ServerHandler->>ServerStorage: store_group_message(group_id, sender_id, content)\n    ServerStorage-->>ServerHandler: saved message\n    ServerHandler-->>SenderService: SEND_GROUP_CHAT_MESSAGE_ACK (server_message_id, client_message_id, timestamp)\n    ServerHandler->>ReceiverHandler: RECEIVE_GROUP_CHAT_MESSAGE_NOTIFICATION (group_id, server_message_id, sender details, content, timestamp)\n    SenderService->>SenderHandler: handle_group_chat_message_sent_ack(message)\n    SenderHandler->>SenderApp: Update UI (sent message status)\n    ReceiverHandler->>ReceiverApp: Update UI (new message)\n\n    Note over SenderApp, ReceiverApp: Recalling Group Message\n    SenderApp->>SenderService: recall_group_chat_message(group_id, server_message_id)\n    SenderService->>ServerHandler: RECALL_GROUP_CHAT_MESSAGE_REQUEST (group_id, server_message_id_to_recall)\n    ServerHandler->>ServerStorage: mark_message_as_recalled(message_id)\n    ServerStorage-->>ServerHandler: success or failure\n    alt Recall Success\n        ServerHandler-->>SenderService: GROUP_CHAT_MESSAGE_RECALLED_ACK (status_code=200, recalled_server_message_id)\n        ServerHandler->>ReceiverHandler: GROUP_CHAT_MESSAGE_RECALL_NOTIFICATION (group_id, recalled_server_message_id, recalled_by_user_id, timestamp)\n        SenderService->>SenderHandler: handle_group_chat_message_recall_ack(message)\n        SenderHandler->>SenderApp: Update UI (message recalled)\n        ReceiverHandler->>ReceiverApp: Update UI (message marked as recalled)\n    else Recall Failure\n        ServerHandler-->>SenderService: GROUP_CHAT_MESSAGE_RECALLED_ACK (status_code=4xx, error message)\n        SenderService->>SenderHandler: handle_group_chat_message_recall_ack(message)\n        SenderHandler->>SenderApp: Update UI (recall failed)\n    end"})]})}let c={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:r}=Object.assign({},(0,p.a)(),e.components);return r?(0,a.jsx)(r,{...e,children:(0,a.jsx)(d,{...e})}):d(e)},pageOpts:{filePath:"pages/sequences/group_chat.md",route:"/sequences/group_chat",timestamp:1749055448e3,pageMap:[{kind:"Meta",data:{index:{title:"Introduction",type:"page",display:"hidden"},demo:{title:"Demo & Introduction",type:"page"},protocol:{title:"Protocol",type:"page"},sequence:{title:"Sequence Flow",type:"page"},database:{title:"Database Design",type:"page"},uml:{title:"UML Structure",type:"page"},"stress-test":{title:"Stress Testing",type:"page",display:"hidden"}}},{kind:"MdxPage",name:"database",route:"/database"},{kind:"MdxPage",name:"demo",route:"/demo"},{kind:"MdxPage",name:"index",route:"/"},{kind:"Folder",name:"protocol",route:"/protocol",children:[{kind:"Meta",data:{index:{title:"Protocol Overview",type:"page"},authentication:{title:"Authentication",type:"page"},private_chat:{title:"Private Chat",type:"page"},group_chat:{title:"Group Chat",type:"page"},presence:"Presence"}},{kind:"MdxPage",name:"authentication",route:"/protocol/authentication"},{kind:"MdxPage",name:"group_chat",route:"/protocol/group_chat"},{kind:"MdxPage",name:"index",route:"/protocol"},{kind:"MdxPage",name:"presence",route:"/protocol/presence"},{kind:"MdxPage",name:"private_chat",route:"/protocol/private_chat"}]},{kind:"MdxPage",name:"sequence",route:"/sequence"},{kind:"Folder",name:"sequences",route:"/sequences",children:[{kind:"MdxPage",name:"authentication",route:"/sequences/authentication"},{kind:"MdxPage",name:"group_chat",route:"/sequences/group_chat"},{kind:"MdxPage",name:"presence",route:"/sequences/presence"},{kind:"MdxPage",name:"private_chat",route:"/sequences/private_chat"},{kind:"Meta",data:{authentication:"Authentication",group_chat:"Group Chat",presence:"Presence",private_chat:"Private Chat"}}]},{kind:"MdxPage",name:"stress-test",route:"/stress-test"},{kind:"MdxPage",name:"uml",route:"/uml"}],flexsearch:{codeblocks:!0},readingTime:{text:"0 min read",minutes:0,time:0,words:0},title:"Group Chat",headings:l},pageNextRoute:"/sequences/group_chat",nextraLayout:i.ZP,themeConfig:s.Z};r.default=(0,t.j)(c)},3209:function(e,r,n){"use strict";var a=n(5893),t=n(7656),i=n(1163);let s={logo:(0,a.jsxs)("div",{className:"flex items-center",children:[(0,a.jsx)(t.Z,{size:24,className:"mr-2"}),(0,a.jsx)("span",{className:"font-bold text-xl",children:"Whisper Chat"})]}),project:{link:"https://github.com/ukeSJTU/whisper"},docsRepositoryBase:"https://github.com/ukeSJTU/whisper-docs",footer:{text:(0,a.jsxs)("span",{children:["\xa9 ",new Date().getFullYear()," Whisper Chat. All rights reserved."]})},useNextSeoProps(){let{asPath:e}=(0,i.useRouter)();return{titleTemplate:"/"!==e?"%s – Whisper Chat":"Whisper Chat - Secure Real-Time Communication",description:"Whisper is a modern, secure web-based chat application for real-time communication."}},head:(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1.0"}),(0,a.jsx)("meta",{name:"description",content:"Whisper is a modern, secure web-based chat application for real-time communication."}),(0,a.jsx)("meta",{name:"og:title",content:"Whisper Chat"}),(0,a.jsx)("link",{rel:"icon",href:"/favicon.ico"})]}),banner:{key:"whisper-release",text:(0,a.jsxs)("span",{children:["\uD83C\uDF89 Try Whisper Chat online →"," ",(0,a.jsx)("a",{href:"https://whisper.ukehome.top",children:"whisper"})]})},primaryHue:{dark:260,light:180},navigation:{prev:!0,next:!0},darkMode:!0,nextThemes:{defaultTheme:"system"}};r.Z=s},5789:function(){},8757:function(e,r,n){"use strict";n.d(r,{G:function(){return s}});var a=n(5893),t=n(7294),i=n(7541);function s({chart:e}){let r=(0,t.useId)(),[n,s]=(0,t.useState)("");return(0,t.useEffect)(()=>{let n=document.documentElement,a=new MutationObserver(t);return a.observe(n,{attributes:!0}),t(),()=>{a.disconnect()};async function t(){let a=n.classList.contains("dark")||n.attributes.getNamedItem("data-theme")?.value==="dark";try{i.N.initialize({startOnLoad:!1,securityLevel:"loose",fontFamily:"inherit",themeCSS:"margin: 1.5rem auto 0;",theme:a?"dark":"default"});let{svg:n}=await i.N.render(r.replaceAll(":",""),e);s(n)}catch(e){console.error("Error while rendering mermaid",e)}}},[e]),(0,a.jsx)("div",{dangerouslySetInnerHTML:{__html:n}})}}},function(e){e.O(0,[7163,2114,3542,2888,9774,179],function(){return e(e.s=6806)}),_N_E=e.O()}]);