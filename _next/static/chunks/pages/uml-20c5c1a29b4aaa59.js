(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4165],{3601:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/uml",function(){return t(2243)}])},2243:function(e,n,t){"use strict";t.r(n),t.d(n,{__toc:function(){return g}});var s=t(5893),a=t(2673),i=t(5417),r=t(3209);t(4759);var o=t(2643),c=t(208),l=t(8902);let d=e=>{let{children:n}=e,t=Object.assign({div:"div"},(0,o.a)());return(0,s.jsx)(t.div,{className:"max-w-screen-xl mx-auto px-4 py-8",children:n})},g=[{depth:2,value:"Core Component Structure",id:"core-component-structure"},{depth:2,value:"Architecture Layers",id:"architecture-layers"},{depth:2,value:"Message Encryption Flow",id:"message-encryption-flow"},{depth:2,value:"Notification System",id:"notification-system"},{depth:2,value:"WebSocket Connection Management",id:"websocket-connection-management"},{depth:2,value:"Data Consistency and Synchronization",id:"data-consistency-and-synchronization"},{depth:2,value:"Server Architecture",id:"server-architecture"}];function p(e){let n=Object.assign({h1:"h1",p:"p",h2:"h2"},(0,o.a)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h1,{children:"UML Structure"}),"\n",(0,s.jsx)(c.UW,{type:"info",children:(0,s.jsx)(n.p,{children:"This page presents the Unified Modeling Language (UML) diagrams that describe the architecture and class relationships of the Whisper Chat application."})}),"\n",(0,s.jsx)(n.h2,{id:"core-component-structure",children:"Core Component Structure"}),"\n",(0,s.jsx)(n.p,{children:"The following class diagram illustrates the main components of the Whisper system and their relationships:"}),"\n",(0,s.jsx)(l.Z,{id:"whisper-class-diagram",content:'\nclassDiagram\n    class User {\n        +UUID id\n        +String username\n        +String email\n        +String displayName\n        +String profilePicture\n        +UserStatus status\n        +DateTime lastSeen\n        +createConversation()\n        +sendMessage()\n        +updateProfile()\n    }\n\n    class UserStatus {\n        <<enumeration>>\n        ONLINE\n        AWAY\n        DO_NOT_DISTURB\n        OFFLINE\n    }\n\n    class Conversation {\n        +UUID id\n        +ConversationType type\n        +String title\n        +User createdBy\n        +DateTime createdAt\n        +List~Participant~ participants\n        +List~Message~ messages\n        +addParticipant()\n        +removeParticipant()\n        +getMessages()\n    }\n\n    class ConversationType {\n        <<enumeration>>\n        DIRECT\n        GROUP\n    }\n\n    class Participant {\n        +UUID id\n        +User user\n        +Conversation conversation\n        +ParticipantRole role\n        +DateTime joinedAt\n        +Message lastReadMessage\n        +markAsRead()\n        +leaveConversation()\n        +changeRole()\n    }\n\n    class ParticipantRole {\n        <<enumeration>>\n        ADMIN\n        MEMBER\n    }\n\n    class Message {\n        +UUID id\n        +Conversation conversation\n        +User sender\n        +MessageType type\n        +String content\n        +Boolean encrypted\n        +DateTime sentAt\n        +DateTime editedAt\n        +Message parentMessage\n        +List~Reaction~ reactions\n        +List~Media~ attachments\n        +edit()\n        +delete()\n        +react()\n    }\n\n    class MessageType {\n        <<enumeration>>\n        TEXT\n        MEDIA\n        SYSTEM\n    }\n\n    class Media {\n        +UUID id\n        +Message message\n        +MediaType type\n        +String fileName\n        +Long fileSize\n        +String mimeType\n        +String storagePath\n        +String thumbnailPath\n        +Map~String,Object~ metadata\n        +download()\n        +generatePreview()\n    }\n\n    class MediaType {\n        <<enumeration>>\n        IMAGE\n        VIDEO\n        AUDIO\n        DOCUMENT\n    }\n\n    class Reaction {\n        +UUID id\n        +Message message\n        +User user\n        +String emoji\n        +DateTime createdAt\n    }\n\n    class EncryptionService {\n        -KeyPair identityKey\n        -Map~UUID,SessionKey~ sessions\n        +initializeKeys()\n        +createSession()\n        +encryptMessage()\n        +decryptMessage()\n        +rotateKeys()\n    }\n\n    class NotificationService {\n        +registerDevice()\n        +unregisterDevice()\n        +sendNotification()\n        +updateBadgeCount()\n    }\n\n    class MessageSyncService {\n        +syncMessages()\n        +handleConflicts()\n        +markAsSynced()\n    }\n\n    class PresenceService {\n        +updateStatus()\n        +subscribeToPresence()\n        +unsubscribeFromPresence()\n    }\n\n    User "1" -- "n" Conversation : creates\n    User "1" -- "n" Participant : has role\n    User "1" -- "n" Message : sends\n    User "1" -- "n" Reaction : adds\n    \n    Conversation "1" -- "n" Participant : contains\n    Conversation "1" -- "n" Message : contains\n    \n    Participant "1" -- "1" User : represents\n    \n    Message "0..1" -- "n" Message : replies to\n    Message "1" -- "n" Reaction : receives\n    Message "1" -- "n" Media : attaches\n    \n    User ..> EncryptionService : uses\n    User ..> NotificationService : receives\n    User ..> MessageSyncService : syncs\n    User ..> PresenceService : updates\n  '}),"\n",(0,s.jsx)(n.h2,{id:"architecture-layers",children:"Architecture Layers"}),"\n",(0,s.jsx)(n.p,{children:"This diagram illustrates the layered architecture of the Whisper application:"}),"\n",(0,s.jsx)(l.Z,{id:"architecture-layers",content:"\nclassDiagram\n    class PresentationLayer {\n        +Components\n        +Pages\n        +Hooks\n        +Context Providers\n        +UI State Management\n    }\n    \n    class ApplicationLayer {\n        +Services\n        +Controllers\n        +Event Handlers\n        +State Management\n        +Business Logic\n    }\n    \n    class DomainLayer {\n        +Entities\n        +Value Objects\n        +Domain Events\n        +Repositories (interfaces)\n        +Domain Services\n    }\n    \n    class InfrastructureLayer {\n        +API Clients\n        +Repository Implementations\n        +WebSocket Clients\n        +Storage Adapters\n        +Authentication Providers\n        +Encryption Utilities\n    }\n    \n    PresentationLayer --> ApplicationLayer : uses\n    ApplicationLayer --> DomainLayer : uses\n    ApplicationLayer --> InfrastructureLayer : uses\n    DomainLayer <.. InfrastructureLayer : implements\n  "}),"\n",(0,s.jsx)(n.h2,{id:"message-encryption-flow",children:"Message Encryption Flow"}),"\n",(0,s.jsx)(n.p,{children:"The following diagram illustrates how message encryption works within Whisper:"}),"\n",(0,s.jsx)(l.Z,{id:"encryption-flow",content:'\nclassDiagram\n    class EncryptionManager {\n        -KeyStore keyStore\n        -SessionManager sessionManager\n        +initializeKeys()\n        +encryptMessage()\n        +decryptMessage()\n        +rotateKeys()\n    }\n    \n    class KeyStore {\n        -Map~String,Key~ keys\n        +generateKeyPair()\n        +storeKey()\n        +retrieveKey()\n        +deleteKey()\n    }\n    \n    class SessionManager {\n        -Map~UUID,Session~ sessions\n        +createSession()\n        +getSession()\n        +updateSession()\n        +closeSession()\n    }\n    \n    class Session {\n        -UUID id\n        -UUID participantId\n        -SymmetricKey currentKey\n        -List~SymmetricKey~ previousKeys\n        -Int messageCounter\n        +encrypt()\n        +decrypt()\n        +ratchetForward()\n    }\n    \n    class Message {\n        +UUID id\n        +String encryptedContent\n        +Int messageNumber\n        +byte[] iv\n        +encrypt()\n        +decrypt()\n    }\n    \n    EncryptionManager "1" --> "1" KeyStore : uses\n    EncryptionManager "1" --> "1" SessionManager : uses\n    SessionManager "1" --> "n" Session : manages\n    Session "1" --> "n" Message : encrypts/decrypts\n  '}),"\n",(0,s.jsx)(n.h2,{id:"notification-system",children:"Notification System"}),"\n",(0,s.jsx)(n.p,{children:"This diagram shows the components involved in Whisper's notification system:"}),"\n",(0,s.jsx)(l.Z,{id:"notification-system",content:'\nclassDiagram\n    class NotificationManager {\n        +registerDevice()\n        +unregisterDevice()\n        +sendNotification()\n        +scheduleNotification()\n        +cancelNotification()\n    }\n    \n    class NotificationChannel {\n        <<interface>>\n        +send()\n        +cancel()\n    }\n    \n    class PushNotificationChannel {\n        -PushProvider provider\n        +send()\n        +cancel()\n    }\n    \n    class EmailNotificationChannel {\n        -EmailService emailService\n        +send()\n        +cancel()\n    }\n    \n    class InAppNotificationChannel {\n        -WebSocketService socketService\n        +send()\n        +cancel()\n    }\n    \n    class Notification {\n        +UUID id\n        +UUID recipientId\n        +String title\n        +String body\n        +Map~String,String~ data\n        +NotificationType type\n        +DateTime createdAt\n        +DateTime scheduledFor\n        +NotificationPriority priority\n    }\n    \n    class NotificationPreferences {\n        +UUID userId\n        +Boolean pushEnabled\n        +Boolean emailEnabled\n        +Boolean inAppEnabled\n        +Map~NotificationType,Boolean~ typePreferences\n        +TimeRange quietHours\n    }\n    \n    NotificationManager "1" --> "n" NotificationChannel : uses\n    NotificationManager "1" --> "n" Notification : sends\n    NotificationManager "1" --> "n" NotificationPreferences : checks\n    \n    NotificationChannel <|.. PushNotificationChannel : implements\n    NotificationChannel <|.. EmailNotificationChannel : implements\n    NotificationChannel <|.. InAppNotificationChannel : implements\n  '}),"\n",(0,s.jsx)(n.h2,{id:"websocket-connection-management",children:"WebSocket Connection Management"}),"\n",(0,s.jsx)(n.p,{children:"This diagram illustrates how Whisper manages WebSocket connections:"}),"\n",(0,s.jsx)(l.Z,{id:"websocket-management",content:'\nclassDiagram\n    class ConnectionManager {\n        -Map~UUID,List~Connection~~ connections\n        +registerConnection()\n        +unregisterConnection()\n        +getConnections()\n        +broadcastMessage()\n        +sendMessage()\n    }\n    \n    class Connection {\n        +UUID id\n        +UUID userId\n        +WebSocket socket\n        +String deviceId\n        +ConnectionStatus status\n        +DateTime connectedAt\n        +DateTime lastActivity\n        +sendMessage()\n        +close()\n        +ping()\n    }\n    \n    class ConnectionStatus {\n        <<enumeration>>\n        CONNECTING\n        CONNECTED\n        IDLE\n        DISCONNECTING\n        DISCONNECTED\n    }\n    \n    class MessageRouter {\n        +routeMessage()\n        +queueOfflineMessage()\n        +deliverQueuedMessages()\n    }\n    \n    class ConnectionMetrics {\n        +trackConnections()\n        +trackMessageVolume()\n        +trackLatency()\n        +getActiveConnectionCount()\n        +getMessagesPerSecond()\n        +getAverageLatency()\n    }\n    \n    ConnectionManager "1" --> "n" Connection : manages\n    ConnectionManager "1" --> "1" MessageRouter : uses\n    ConnectionManager "1" --> "1" ConnectionMetrics : tracks\n  '}),"\n",(0,s.jsx)(n.h2,{id:"data-consistency-and-synchronization",children:"Data Consistency and Synchronization"}),"\n",(0,s.jsx)(n.p,{children:"This diagram illustrates Whisper's approach to data consistency and synchronization across devices:"}),"\n",(0,s.jsx)(l.Z,{id:"data-consistency",content:'\nclassDiagram\n    class SyncManager {\n        +syncMessages()\n        +syncContacts()\n        +syncSettings()\n        +handleConflicts()\n        +trackSyncStatus()\n    }\n    \n    class SyncOperation {\n        +UUID id\n        +UUID userId\n        +String deviceId\n        +SyncType type\n        +SyncStatus status\n        +DateTime initiatedAt\n        +DateTime completedAt\n        +Map~String,Object~ metadata\n    }\n    \n    class SyncType {\n        <<enumeration>>\n        FULL_SYNC\n        INCREMENTAL_SYNC\n        CONFLICT_RESOLUTION\n    }\n    \n    class SyncStatus {\n        <<enumeration>>\n        PENDING\n        IN_PROGRESS\n        COMPLETED\n        FAILED\n        PARTIALLY_COMPLETED\n    }\n    \n    class ChangeTracker {\n        +trackChange()\n        +getChanges()\n        +clearChanges()\n    }\n    \n    class ConflictResolver {\n        +detectConflicts()\n        +resolveConflicts()\n        +applyResolution()\n    }\n    \n    class MergeStrategy {\n        <<interface>>\n        +merge()\n    }\n    \n    class LastWriteWinsMergeStrategy {\n        +merge()\n    }\n    \n    class ThreeWayMergeStrategy {\n        +merge()\n    }\n    \n    class ManualResolutionMergeStrategy {\n        +merge()\n    }\n    \n    SyncManager "1" --> "n" SyncOperation : creates\n    SyncManager "1" --> "1" ChangeTracker : uses\n    SyncManager "1" --> "1" ConflictResolver : uses\n    \n    ConflictResolver "1" --> "n" MergeStrategy : uses\n    \n    MergeStrategy <|.. LastWriteWinsMergeStrategy : implements\n    MergeStrategy <|.. ThreeWayMergeStrategy : implements\n    MergeStrategy <|.. ManualResolutionMergeStrategy : implements\n  '}),"\n",(0,s.jsx)(n.h2,{id:"server-architecture",children:"Server Architecture"}),"\n",(0,s.jsx)(n.p,{children:"This diagram shows the server-side architecture of Whisper:"}),"\n",(0,s.jsx)(l.Z,{id:"server-architecture",content:"\nclassDiagram\n    class APIGateway {\n        +authenticateRequest()\n        +routeRequest()\n        +validatePayload()\n        +rateLimit()\n    }\n    \n    class UserService {\n        +createUser()\n        +updateUser()\n        +deleteUser()\n        +getUserProfile()\n        +searchUsers()\n    }\n    \n    class ConversationService {\n        +createConversation()\n        +updateConversation()\n        +deleteConversation()\n        +getConversationDetails()\n        +listConversations()\n    }\n    \n    class MessageService {\n        +sendMessage()\n        +editMessage()\n        +deleteMessage()\n        +getMessages()\n        +searchMessages()\n    }\n    \n    class AuthenticationService {\n        +registerUser()\n        +loginUser()\n        +logoutUser()\n        +refreshToken()\n        +resetPassword()\n    }\n    \n    class MediaService {\n        +uploadMedia()\n        +downloadMedia()\n        +generateThumbnail()\n        +deleteMedia()\n    }\n    \n    class WebSocketManager {\n        +handleConnection()\n        +handleDisconnection()\n        +processMessage()\n        +broadcastToRoom()\n    }\n    \n    APIGateway --> UserService : routes to\n    APIGateway --> ConversationService : routes to\n    APIGateway --> MessageService : routes to\n    APIGateway --> AuthenticationService : routes to\n    APIGateway --> MediaService : routes to\n    APIGateway --> WebSocketManager : routes to\n  "}),"\n",(0,s.jsx)(n.p,{children:"These UML diagrams provide a comprehensive view of Whisper's architecture, helping developers understand how the various components work together to create a secure, efficient real-time communication system."})]})}let u={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,s.jsx)(d,{...e,children:(0,s.jsx)(p,{...e})})},pageOpts:{filePath:"pages/uml.mdx",route:"/uml",timestamp:1749082044e3,pageMap:[{kind:"Meta",data:{index:{title:"Introduction",type:"page",display:"hidden"},demo:{title:"Demo & Introduction",type:"page"},protocol:{title:"Protocol",type:"page"},sequence:{title:"Sequence Flow",type:"page"},database:{title:"Database Design",type:"page"},uml:{title:"UML Structure",type:"page"},"stress-test":{title:"Stress Testing",type:"page",display:"hidden"},encrypt:{title:"Encrypt",type:"page"}}},{kind:"MdxPage",name:"database",route:"/database"},{kind:"MdxPage",name:"demo",route:"/demo"},{kind:"MdxPage",name:"encrypt",route:"/encrypt"},{kind:"MdxPage",name:"index",route:"/"},{kind:"MdxPage",name:"protocol",route:"/protocol"},{kind:"MdxPage",name:"sequence",route:"/sequence"},{kind:"MdxPage",name:"stress-test",route:"/stress-test"},{kind:"MdxPage",name:"uml",route:"/uml"}],flexsearch:{codeblocks:!0},readingTime:{text:"1 min read",minutes:.63,time:37800,words:126},title:"UML Structure",headings:g},pageNextRoute:"/uml",nextraLayout:i.ZP,themeConfig:r.Z};n.default=(0,a.j)(u)},8902:function(e,n,t){"use strict";var s=t(5893),a=t(2010),i=t(7294);n.Z=e=>{let{id:n,content:r}=e,{resolvedTheme:o}=(0,a.F)(),[c,l]=(0,i.useState)(null),d=(0,i.useRef)(null);return(0,i.useEffect)(()=>{Promise.all([t.e(7163),t.e(3542),t.e(6637)]).then(t.bind(t,6637)).then(e=>{e.default.initialize({startOnLoad:!0,theme:"forest",flowchart:{useMaxWidth:!0,htmlLabels:!0},sequence:{diagramMarginX:50,diagramMarginY:10,actorMargin:80,width:150,height:65,boxMargin:10,boxTextMargin:5,noteMargin:10,messageMargin:35,mirrorActors:!0},class:{diagramPadding:8,useMaxWidth:!0}});try{e.default.render("mermaid-".concat(n),r).then(e=>{let{svg:n}=e;l(n)})}catch(e){console.error("Error rendering mermaid diagram:",e),l('<div class="p-4 text-red-500">Error rendering diagram</div>')}})},[r,n,"dark"===o]),(0,i.useEffect)(()=>{c&&d.current&&(d.current.innerHTML=c)},[c]),(0,s.jsx)("div",{className:"my-8 overflow-x-auto rounded-lg p-4 shadow-sm",children:(0,s.jsx)("div",{ref:d,className:"mermaid flex justify-center"})})}},3209:function(e,n,t){"use strict";var s=t(5893),a=t(7656),i=t(1163);let r={logo:(0,s.jsxs)("div",{className:"flex items-center",children:[(0,s.jsx)(a.Z,{size:24,className:"mr-2"}),(0,s.jsx)("span",{className:"font-bold text-xl",children:"Whisper Chat"})]}),project:{link:"https://github.com/ukeSJTU/whisper"},docsRepositoryBase:"https://github.com/ukeSJTU/whisper-docs",footer:{text:(0,s.jsxs)("span",{children:["\xa9 ",new Date().getFullYear()," Whisper Chat. All rights reserved."]})},useNextSeoProps(){let{asPath:e}=(0,i.useRouter)();return{titleTemplate:"/"!==e?"%s – Whisper Chat":"Whisper Chat - Secure Real-Time Communication",description:"Whisper is a modern, secure web-based chat application for real-time communication."}},head:(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1.0"}),(0,s.jsx)("meta",{name:"description",content:"Whisper is a modern, secure web-based chat application for real-time communication."}),(0,s.jsx)("meta",{name:"og:title",content:"Whisper Chat"}),(0,s.jsx)("link",{rel:"icon",href:"/favicon.ico"})]}),banner:{key:"whisper-release",text:(0,s.jsxs)("span",{children:["\uD83C\uDF89 Try Whisper Chat online →"," ",(0,s.jsx)("a",{href:"https://whisper.ukehome.top",children:"whisper"})]})},primaryHue:{dark:260,light:180},navigation:{prev:!0,next:!0},darkMode:!0,nextThemes:{defaultTheme:"system"}};n.Z=r},5789:function(){}},function(e){e.O(0,[2114,2888,9774,179],function(){return e(e.s=3601)}),_N_E=e.O()}]);