(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[768],{4670:function(e,n,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/sequence",function(){return r(7483)}])},7483:function(e,n,r){"use strict";r.r(n),r.d(n,{__toc:function(){return l}});var t=r(5893),i=r(2673),a=r(5417),s=r(3209);r(4759);var c=r(2643),o=r(208),d=r(8902);let p=e=>{let{children:n}=e,r=Object.assign({div:"div"},(0,c.a)());return(0,t.jsx)(r.div,{className:"max-w-screen-xl mx-auto px-4 py-8",children:n})},l=[{depth:2,value:"Message Delivery Sequence",id:"message-delivery-sequence"},{depth:2,value:"Authentication Flow",id:"authentication-flow"},{depth:2,value:"Group Chat Creation",id:"group-chat-creation"},{depth:2,value:"Message Synchronization Across Devices",id:"message-synchronization-across-devices"},{depth:2,value:"Media Sharing Flow",id:"media-sharing-flow"}];function u(e){let n=Object.assign({h1:"h1",p:"p",h2:"h2"},(0,c.a)(),e.components);return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{children:"Sequence Flow"}),"\n",(0,t.jsx)(o.UW,{type:"info",children:(0,t.jsx)(n.p,{children:"This section provides a detailed view of the message flow within the Whisper system, illustrating how different components interact during typical operations."})}),"\n",(0,t.jsx)(n.h2,{id:"message-delivery-sequence",children:"Message Delivery Sequence"}),"\n",(0,t.jsx)(n.p,{children:"The following diagram illustrates the sequence of events that occurs when a message is sent from one user to another:"}),"\n",(0,t.jsx)(d.Z,{id:"message-sequence",content:"\nsequenceDiagram\n    participant Sender as Sender Client\n    participant Server as Whisper Server\n    participant DB as Database\n    participant Recipient as Recipient Client\n\n    Sender->>Sender: Compose message\n    Sender->>Sender: Encrypt message with recipient's public key\n    \n    Sender->>Server: Send encrypted message\n    activate Server\n    Server->>DB: Store message\n    DB-->>Server: Confirm storage\n    \n    alt Recipient Online\n        Server->>Recipient: Forward encrypted message\n        activate Recipient\n        Recipient->>Recipient: Decrypt message with private key\n        Recipient->>Recipient: Display message to user\n        Recipient->>Server: Send delivery receipt\n        Server->>DB: Update message status\n        Server->>Sender: Confirm delivery\n        deactivate Recipient\n    else Recipient Offline\n        Server->>DB: Queue message for later delivery\n        Server->>Sender: Confirm message queued\n    end\n    \n    deactivate Server\n    \n    Note over Recipient: When recipient comes online\n    Recipient->>Server: Establish connection\n    Server->>DB: Retrieve queued messages\n    DB-->>Server: Return queued messages\n    Server->>Recipient: Send queued messages\n    Recipient->>Recipient: Decrypt and display messages\n    Recipient->>Server: Send delivery receipts\n    Server->>DB: Update message statuses\n    Server->>Sender: Confirm delivery (if sender online)\n  "}),"\n",(0,t.jsx)(n.h2,{id:"authentication-flow",children:"Authentication Flow"}),"\n",(0,t.jsx)(n.p,{children:"The following diagram illustrates the authentication process when a user logs into Whisper:"}),"\n",(0,t.jsx)(d.Z,{id:"auth-sequence",content:"\nsequenceDiagram\n    participant User as User\n    participant Client as Client Application\n    participant Auth as Authentication Service\n    participant Key as Key Management Service\n    participant DB as User Database\n    \n    User->>Client: Enter credentials\n    Client->>Auth: Submit login request\n    activate Auth\n    \n    Auth->>DB: Validate credentials\n    DB-->>Auth: Credentials valid\n    \n    Auth->>Key: Request key material\n    Key-->>Auth: Return key material\n    \n    Auth->>Auth: Generate session tokens\n    Auth-->>Client: Return auth tokens + initial key material\n    deactivate Auth\n    \n    Client->>Client: Store tokens securely\n    Client->>Client: Initialize encryption system\n    \n    Client->>User: Show authenticated UI\n  "}),"\n",(0,t.jsx)(n.h2,{id:"group-chat-creation",children:"Group Chat Creation"}),"\n",(0,t.jsx)(n.p,{children:"This diagram shows the process of creating a new group chat:"}),"\n",(0,t.jsx)(d.Z,{id:"group-chat-sequence",content:"\nsequenceDiagram\n    participant Creator as Group Creator\n    participant Server as Whisper Server\n    participant DB as Database\n    participant Members as Group Members\n    \n    Creator->>Creator: Initiate group creation\n    Creator->>Creator: Generate group key pair\n    \n    Creator->>Server: Create group request\n    activate Server\n    Server->>DB: Create group record\n    DB-->>Server: Group created\n    Server-->>Creator: Group creation confirmed\n    deactivate Server\n    \n    Creator->>Creator: Encrypt group key for each member\n    \n    loop For each member\n        Creator->>Server: Add member request (with encrypted key)\n        Server->>DB: Add member to group\n        Server->>Members: Send group invitation\n        Members->>Members: Decrypt group key\n        Members->>Server: Accept invitation\n        Server->>DB: Update member status\n        Server->>Creator: Member added confirmation\n    end\n    \n    Server->>All: Broadcast group ready notification\n  "}),"\n",(0,t.jsx)(n.h2,{id:"message-synchronization-across-devices",children:"Message Synchronization Across Devices"}),"\n",(0,t.jsx)(n.p,{children:"This diagram illustrates how messages are synchronized across multiple devices belonging to the same user:"}),"\n",(0,t.jsx)(d.Z,{id:"sync-sequence",content:"\nsequenceDiagram\n    participant Device1 as Device 1\n    participant Device2 as Device 2\n    participant Server as Whisper Server\n    participant DB as Database\n    \n    Device1->>Device1: Generate message\n    Device1->>Device1: Encrypt for recipient\n    Device1->>Device1: Encrypt copy for own devices\n    \n    Device1->>Server: Send encrypted message\n    Server->>DB: Store message\n    \n    alt Recipient is self device\n        Server->>Device2: Forward encrypted message\n        Device2->>Device2: Decrypt with device key\n        Device2->>Device2: Mark as synchronized\n        Device2->>Server: Confirm sync\n        Server->>DB: Update sync status\n    else Recipient is another user\n        Server->>Recipient: Forward to recipient\n        Server->>Device2: Send copy for synchronization\n        Device2->>Device2: Decrypt with device key\n        Device2->>Device2: Mark as synchronized\n        Device2->>Server: Confirm sync\n        Server->>DB: Update sync status\n    end\n  "}),"\n",(0,t.jsx)(n.h2,{id:"media-sharing-flow",children:"Media Sharing Flow"}),"\n",(0,t.jsx)(n.p,{children:"The following sequence diagram illustrates how media files are shared between users:"}),"\n",(0,t.jsx)(d.Z,{id:"media-sequence",content:"\nsequenceDiagram\n    participant Sender as Sender\n    participant Server as Whisper Server\n    participant Storage as Media Storage\n    participant Recipient as Recipient\n    \n    Sender->>Sender: Select media file\n    Sender->>Sender: Generate encryption key\n    Sender->>Sender: Encrypt media with key\n    \n    Sender->>Server: Request upload URL\n    Server->>Storage: Request temporary URL\n    Storage-->>Server: Return signed URL\n    Server-->>Sender: Return upload URL\n    \n    Sender->>Storage: Upload encrypted media\n    Storage-->>Sender: Confirm upload\n    \n    Sender->>Sender: Create message with media reference and key\n    Sender->>Sender: Encrypt message for recipient\n    Sender->>Server: Send encrypted message\n    \n    Server->>Recipient: Forward encrypted message\n    Recipient->>Recipient: Decrypt message\n    Recipient->>Recipient: Extract media reference and key\n    \n    Recipient->>Storage: Request encrypted media\n    Storage-->>Recipient: Return encrypted media\n    Recipient->>Recipient: Decrypt media with key\n    Recipient->>Recipient: Display media\n  "})]})}let h={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return(0,t.jsx)(p,{...e,children:(0,t.jsx)(u,{...e})})},pageOpts:{filePath:"pages/sequence.mdx",route:"/sequence",timestamp:174900015e4,pageMap:[{kind:"Meta",data:{index:{title:"Introduction",type:"page",display:"hidden"},demo:{title:"Demo & Introduction",type:"page"},protocol:{title:"Protocol",type:"page"},sequence:{title:"Sequence Flow",type:"page"},database:{title:"Database Design",type:"page"},uml:{title:"UML Structure",type:"page"},"stress-test":{title:"Stress Testing",type:"page"}}},{kind:"MdxPage",name:"database",route:"/database"},{kind:"MdxPage",name:"demo",route:"/demo"},{kind:"MdxPage",name:"index",route:"/"},{kind:"MdxPage",name:"protocol",route:"/protocol"},{kind:"MdxPage",name:"sequence",route:"/sequence"},{kind:"MdxPage",name:"stress-test",route:"/stress-test"},{kind:"MdxPage",name:"uml",route:"/uml"}],flexsearch:{codeblocks:!0},readingTime:{text:"1 min read",minutes:.495,time:29700,words:99},title:"Sequence Flow",headings:l},pageNextRoute:"/sequence",nextraLayout:a.ZP,themeConfig:s.Z};n.default=(0,i.j)(h)},8902:function(e,n,r){"use strict";var t=r(5893),i=r(2010),a=r(7294);n.Z=e=>{let{id:n,content:s}=e,{resolvedTheme:c}=(0,i.F)(),[o,d]=(0,a.useState)(null),p=(0,a.useRef)(null),l="dark"===c;return(0,a.useEffect)(()=>{Promise.all([r.e(163),r.e(91)]).then(r.bind(r,6637)).then(e=>{e.default.initialize({startOnLoad:!0,theme:l?"dark":"default",flowchart:{useMaxWidth:!0,htmlLabels:!0},sequence:{diagramMarginX:50,diagramMarginY:10,actorMargin:80,width:150,height:65,boxMargin:10,boxTextMargin:5,noteMargin:10,messageMargin:35,mirrorActors:!0},class:{diagramPadding:8,useMaxWidth:!0}});try{e.default.render("mermaid-".concat(n),s).then(e=>{let{svg:n}=e;d(n)})}catch(e){console.error("Error rendering mermaid diagram:",e),d('<div class="p-4 text-red-500">Error rendering diagram</div>')}})},[s,n,l]),(0,a.useEffect)(()=>{o&&p.current&&(p.current.innerHTML=o)},[o]),(0,t.jsx)("div",{className:"my-8 overflow-x-auto rounded-lg border border-gray-200 dark:border-gray-800 bg-white dark:bg-gray-950 p-4 shadow-sm",children:(0,t.jsx)("div",{ref:p,className:"mermaid flex justify-center"})})}},3209:function(e,n,r){"use strict";var t=r(5893),i=r(7656),a=r(1163);let s={logo:(0,t.jsxs)("div",{className:"flex items-center",children:[(0,t.jsx)(i.Z,{size:24,className:"mr-2"}),(0,t.jsx)("span",{className:"font-bold text-xl",children:"Whisper Chat"})]}),project:{link:"https://github.com/yourusername/whisper-chat"},docsRepositoryBase:"https://github.com/yourusername/whisper-blog",footer:{text:(0,t.jsxs)("span",{children:["\xa9 ",new Date().getFullYear()," Whisper Chat. All rights reserved."]})},useNextSeoProps(){let{asPath:e}=(0,a.useRouter)();return{titleTemplate:"/"!==e?"%s – Whisper Chat":"Whisper Chat - Secure Real-Time Communication",description:"Whisper is a modern, secure web-based chat application for real-time communication."}},head:(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)("meta",{name:"viewport",content:"width=device-width, initial-scale=1.0"}),(0,t.jsx)("meta",{name:"description",content:"Whisper is a modern, secure web-based chat application for real-time communication."}),(0,t.jsx)("meta",{name:"og:title",content:"Whisper Chat"}),(0,t.jsx)("link",{rel:"icon",href:"/favicon.ico"})]}),banner:{key:"whisper-release",text:(0,t.jsxs)("span",{children:["\uD83C\uDF89 Try Whisper Chat online →"," ",(0,t.jsx)("a",{href:"https://whisper.ukehome.top",children:"whisper"})]})},primaryHue:{dark:260,light:230},navigation:{prev:!0,next:!0},darkMode:!0,nextThemes:{defaultTheme:"system"}};n.Z=s},5789:function(){}},function(e){e.O(0,[114,888,774,179],function(){return e(e.s=4670)}),_N_E=e.O()}]);