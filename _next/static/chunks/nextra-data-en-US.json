{"/demo":{"title":"Whisper Chat Demo & Introduction","data":{"":"Whisper is currently in public beta. While the core functionality is stable, you may encounter occasional issues as we continue to improve the platform.","what-is-whisper#What is Whisper?":"Whisper is a modern web-based chat application designed for secure, real-time communication. Built with privacy and performance as core principles, Whisper provides a seamless messaging experience across all devices.\nExperience the future of communication\nWhisper combines beautiful design with powerful features to create the ultimate messaging platform.\nWith end-to-end encryption, your conversations remain private and secure.\nTry Whisper Now\nWhisper Chat\nHi there! How's everything going?\n9:32 AM\nGoing great! Just reviewing the new Whisper features. The encryption is impressive!\n9:34 AM\nI know, right? The performance is amazing too. I love how fast messages send.\n9:35 AM\nDefinitely! And the UI is so clean and intuitive. Great job on the design team!\n9:36 AM","core-features#Core Features":"","secure-communication#Secure Communication":"Whisper employs industry-standard encryption protocols to ensure that your messages remain private. All communications are encrypted end-to-end, meaning that only the intended recipients can read your messages.","real-time-messaging#Real-Time Messaging":"Experience seamless, real-time communication with instant message delivery, typing indicators, and read receipts. Whisper's architecture is optimized for low-latency communication, ensuring that your messages are delivered promptly.","multi-platform-support#Multi-Platform Support":"Whisper is available on all major platforms, including:\nWeb browsers (Chrome, Firefox, Safari, Edge)\niOS and Android mobile devices\nDesktop applications for Windows, macOS, and Linux","rich-media-sharing#Rich Media Sharing":"Share more than just text with Whisper's rich media support:\nImage and video sharing\nDocument attachments\nVoice messages\nLocation sharing\nCode snippets with syntax highlighting","group-conversations#Group Conversations":"Create group chats for team collaboration, family discussions, or social gatherings. Whisper supports:\nPublic and private groups\nRole-based permissions\nThread replies for organized discussions\nPinned messages for important information","technology-stack#Technology Stack":"Whisper is built on a modern technology stack designed for performance and scalability:\nFrontend: React, WebSocket API, WebRTC\nBackend: Node.js, Express, Socket.IO\nDatabase: PostgreSQL with real-time capabilities\nInfrastructure: Containerized microservices deployed on Kubernetes\nIn the following sections, we'll dive deeper into Whisper's architecture, exploring its protocol, sequence flows, database design, and performance characteristics."}},"/database":{"title":"Database Design","data":{"":"This section outlines the database architecture that powers Whisper Chat, including table structures, relationships, and optimization strategies.","database-architecture#Database Architecture":"Whisper uses a PostgreSQL database with specialized extensions to handle the unique requirements of a real-time messaging platform. The database is designed to optimize for:\nHigh read/write throughput\nLow-latency queries\nData integrity and consistency\nEfficient search capabilities\nScalability for millions of users and messages","schema-diagram#Schema Diagram":"The following diagram illustrates the relationships between the main entities in Whisper's database:","core-tables#Core Tables":"","users-table#Users Table":"The users table stores essential information about Whisper users:\nCREATE TABLE users (\n  user_id UUID PRIMARY KEY,\n  username VARCHAR(64) NOT NULL UNIQUE,\n  email VARCHAR(255) NOT NULL UNIQUE,\n  display_name VARCHAR(128),\n  profile_picture_url TEXT,\n  status VARCHAR(64) DEFAULT 'offline',\n  last_seen TIMESTAMP WITH TIME ZONE,\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\nCREATE INDEX idx_users_username ON users(username);\nCREATE INDEX idx_users_status ON users(status);","conversations-table#Conversations Table":"The conversations table represents chat conversations, which can be either direct (between two users) or groups:\nCREATE TABLE conversations (\n  conversation_id UUID PRIMARY KEY,\n  conversation_type VARCHAR(16) NOT NULL CHECK (conversation_type IN ('direct', 'group')),\n  title VARCHAR(128),\n  created_by UUID REFERENCES users(user_id),\n  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()\n);\nCREATE INDEX idx_conversations_type ON conversations(conversation_type);\nCREATE INDEX idx_conversations_created_by ON conversations(created_by);","participants-table#Participants Table":"The participants table manages the relationship between users and conversations:\nCREATE TABLE participants (\n  participant_id UUID PRIMARY KEY,\n  user_id UUID NOT NULL REFERENCES users(user_id),\n  conversation_id UUID NOT NULL REFERENCES conversations(conversation_id),\n  role VARCHAR(16) DEFAULT 'member' CHECK (role IN ('admin', 'member')),\n  joined_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  last_read_message_id UUID,\n  UNIQUE(user_id, conversation_id)\n);\nCREATE INDEX idx_participants_user ON participants(user_id);\nCREATE INDEX idx_participants_conversation ON participants(conversation_id);","messages-table#Messages Table":"The messages table stores all messages sent within the platform:\nCREATE TABLE messages (\n  message_id UUID PRIMARY KEY,\n  conversation_id UUID NOT NULL REFERENCES conversations(conversation_id),\n  sender_id UUID NOT NULL REFERENCES users(user_id),\n  message_type VARCHAR(16) NOT NULL CHECK (message_type IN ('text', 'media', 'system')),\n  content TEXT,\n  encrypted BOOLEAN DEFAULT TRUE,\n  sent_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),\n  edited_at TIMESTAMP WITH TIME ZONE,\n  parent_message_id UUID REFERENCES messages(message_id)\n);\nCREATE INDEX idx_messages_conversation ON messages(conversation_id);\nCREATE INDEX idx_messages_sender ON messages(sender_id);\nCREATE INDEX idx_messages_sent_at ON messages(sent_at);\nCREATE INDEX idx_messages_parent ON messages(parent_message_id);","media-table#Media Table":"The media table stores information about media files shared in messages:\nCREATE TABLE media (\n  media_id UUID PRIMARY KEY,\n  message_id UUID NOT NULL REFERENCES messages(message_id),\n  media_type VARCHAR(16) NOT NULL CHECK (media_type IN ('image', 'video', 'audio', 'document')),\n  file_name VARCHAR(255) NOT NULL,\n  file_size BIGINT NOT NULL,\n  mime_type VARCHAR(128) NOT NULL,\n  storage_path TEXT NOT NULL,\n  thumbnail_path TEXT,\n  metadata JSONB\n);\nCREATE INDEX idx_media_message ON media(message_id);\nCREATE INDEX idx_media_type ON media(media_type);","partitioning-strategy#Partitioning Strategy":"For high-scale deployments, Whisper implements table partitioning to improve query performance and maintenance operations:\nMessages are partitioned by date range (monthly), enabling efficient archiving and query optimization.\n-- Example of message table partitioning\nCREATE TABLE messages (\n  -- columns as defined above\n) PARTITION BY RANGE (sent_at);\n-- Create monthly partitions\nCREATE TABLE messages_y2023m01 PARTITION OF messages \n  FOR VALUES FROM ('2023-01-01') TO ('2023-02-01');\n  \nCREATE TABLE messages_y2023m02 PARTITION OF messages \n  FOR VALUES FROM ('2023-02-01') TO ('2023-03-01');\n-- Additional partitions as needed","indexing-strategy#Indexing Strategy":"Whisper employs a comprehensive indexing strategy to ensure optimal query performance:\nPrimary Key Indices: All tables have UUID primary keys\nForeign Key Indices: All foreign key columns are indexed\nCompound Indices: Created for frequently used query patterns\nPartial Indices: Used for filtering on common conditions\nGIN Indices: Used for JSONB and full-text search columns","data-access-patterns#Data Access Patterns":"The database design is optimized for these common data access patterns:\nAccess Pattern\tImplementation\tRetrieve recent messages\tIndex on (conversation_id, sent_at DESC)\tSearch message content\tFull-text search with GIN index\tUser conversation list\tJoin between users, participants, and conversations\tUnread message count\tComparison between last_read_message_id and latest message\tMedia gallery view\tIndex on (conversation_id, media_type)","backup-and-replication#Backup and Replication":"To ensure data durability and availability, Whisper employs:\nContinuous archiving with Point-in-Time Recovery (PITR)\nSynchronous replication to standby servers\nDaily full backups with 30-day retention\nCross-region backup storage","database-scaling#Database Scaling":"As user base grows, Whisper's database scales through:\nRead Replicas: For distributing read queries\nSharding: Horizontal partitioning by user geography or conversation ID\nConnection Pooling: Efficient management of database connections\nQuery Optimization: Regular query plan analysis and optimization\nCaching: Implementing Redis for frequently accessed data"}},"/":{"title":"Whisper Chat Documentation","data":{"":"Welcome to the official documentation for Whisper, a modern, secure web-based chat application designed for real-time communication. This documentation provides a comprehensive overview of Whisper, including its architecture, protocols, and performance metrics.\nWhisper enables seamless, encrypted messaging with a focus on privacy, performance, and user experience.","key-features#Key Features":"Whisper is built with modern web technologies and designed with user privacy and performance in mind:\nEnd-to-End Encryption: All messages are encrypted using state-of-the-art protocols\nReal-Time Communication: Instant message delivery with typing indicators\nMulti-Device Support: Seamlessly sync conversations across all your devices\nMedia Sharing: Easily share images, documents, and other media\nComprehensive API: Extensible architecture for custom integrations","getting-started#Getting Started":"To start using Whisper, you can sign up for an account or explore our detailed documentation to learn more about how Whisper works behind the scenes."}},"/protocol":{"title":"Whisper Protocol Specification","data":{"":"This protocol documentation is intended for developers and system architects. For general usage information, please refer to the user guide.","protocol-overview#Protocol Overview":"Whisper utilizes a custom protocol built on top of WebSockets to enable secure, real-time communication between clients. The protocol is designed with the following goals in mind:\nSecurity: End-to-end encryption for all messages\nEfficiency: Minimal overhead for low-latency communication\nReliability: Message delivery guarantees with acknowledgments\nExtensibility: Flexible message format for future enhancements","message-format#Message Format":"All messages in the Whisper protocol follow a standardized JSON format:\n{\n  \"type\": \"message_type\",\n  \"id\": \"unique_message_id\",\n  \"timestamp\": 1634567890123,\n  \"sender\": \"user_id\",\n  \"recipient\": \"recipient_id\",\n  \"content\": {\n    // Message-specific payload\n  },\n  \"metadata\": {\n    // Additional message metadata\n  }\n}","message-types#Message Types":"The type field indicates the purpose of the message. Common message types include:\nType\tDescription\ttext\tStandard text message\tmedia\tMedia message (image, video, document)\ttyping\tTyping indicator\tread\tRead receipt\tpresence\tUser presence update\tsystem\tSystem notification","encryption#Encryption":"Whisper implements end-to-end encryption using the Signal Protocol, which provides:\nPerfect forward secrecy\nPost-compromise security\nDeniable authentication","undefined#Key Exchange Process":"Initial Registration:\nClient generates identity key pair (IK)\nClient generates signed pre-key (SPK) and signature\nClient generates one-time pre-keys (OPK)\nClient uploads public keys to server\nSession Establishment:\nInitiator fetches recipient's public keys\nInitiator generates ephemeral key pair\nInitiator computes shared secret using X3DH protocol\nInitiator sends initial message with key information","undefined#Message Encryption":"Whisper uses the Double Ratchet Algorithm for message encryption:\nRatchet Initialization:\nInitialize root key from key exchange\nDerive initial chain keys\nSending Messages:\nGenerate message key from sender chain\nEncrypt message with message key\nUpdate sender chain key\nReceiving Messages:\nDecrypt message with corresponding message key\nUpdate receiver chain key","undefined#Verification Mechanism":"Whisper provides multiple verification methods to ensure the authenticity of communications:\nSafety Numbers: Users can verify each other's identity by comparing safety numbers\nQR Code Verification: Scan a QR code to verify a contact's identity\nOut-of-Band Verification: Use an external secure channel to verify identity\nWhen a security event occurs (e.g., a contact reinstalls the app), users are notified about the change in safety numbers.","transport-layer#Transport Layer":"Whisper uses WebSockets as the primary transport layer, with HTTP long-polling as a fallback mechanism:\nWebSockets: Provides bi-directional, full-duplex communication channels over a single TCP connection\nHTTP Fallback: Used in environments where WebSockets are not supported or are blocked","message-flow#Message Flow":"Connection Establishment:\nClient connects to the Whisper server via WebSocket\nClient authenticates using JWT or similar token\nServer verifies authentication and establishes session\nMessage Sending:\nClient encrypts message using recipient's public key\nClient sends encrypted message to server\nServer validates message and forwards to recipient(s)\nRecipient acknowledges receipt\nServer confirms delivery to sender\nOffline Handling:\nIf recipient is offline, server stores message\nWhen recipient comes online, server delivers queued messages\nMessages expire after a configurable TTL (Time To Live)","rate-limiting-and-quotas#Rate Limiting and Quotas":"To prevent abuse and ensure fair usage, Whisper implements rate limiting and quotas:\nMaximum message rate: 100 messages per minute per user\nMaximum connections: 5 concurrent connections per user\nMessage size limit: 10MB for media, 4KB for text","api-reference#API Reference":"For detailed API documentation, please refer to the Whisper API Reference.","protocol-versioning#Protocol Versioning":"The Whisper protocol uses semantic versioning (MAJOR.MINOR.PATCH):\nCurrent version: 1.2.0\nBackward compatibility is maintained within the same MAJOR version\nClients should negotiate protocol version during connection establishment to ensure compatibility."}},"/sequence":{"title":"Sequence Flow","data":{"":"This section provides a detailed view of the message flow within the Whisper system, illustrating how different components interact during typical operations.","message-delivery-sequence#Message Delivery Sequence":"The following diagram illustrates the sequence of events that occurs when a message is sent from one user to another:","authentication-flow#Authentication Flow":"The following diagram illustrates the authentication process when a user logs into Whisper:","group-chat-creation#Group Chat Creation":"This diagram shows the process of creating a new group chat:","message-synchronization-across-devices#Message Synchronization Across Devices":"This diagram illustrates how messages are synchronized across multiple devices belonging to the same user:","media-sharing-flow#Media Sharing Flow":"The following sequence diagram illustrates how media files are shared between users:"}},"/stress-test":{"title":"Dynamic Stress Testing","data":{"":"Running stress tests will generate significant load on the Whisper servers. Please use the test environment for these operations.","performance-under-load#Performance Under Load":"Whisper is designed to handle high volumes of concurrent connections and message exchanges. This page allows you to visualize the performance of Whisper under various load conditions through real-time testing.","testing-methodology#Testing Methodology":"Our stress testing approach evaluates several key metrics:\nConcurrent Connection Capacity: How many simultaneous WebSocket connections the system can maintain\nMessage Throughput: The number of messages that can be processed per second\nLatency: The time it takes for a message to travel from sender to recipient\nResource Utilization: CPU, memory, and network usage under load\nError Rates: The percentage of failed operations under various load conditions","test-scenarios#Test Scenarios":"The stress test dashboard allows you to run the following test scenarios:","scenario-1-gradual-connection-ramp-up#Scenario 1: Gradual Connection Ramp-Up":"This test gradually increases the number of concurrent connections to identify the system's scaling characteristics and potential breaking points.","scenario-2-message-burst-test#Scenario 2: Message Burst Test":"This test sends a sudden burst of messages from multiple clients to measure how the system handles traffic spikes.","scenario-3-long-running-stability-test#Scenario 3: Long-Running Stability Test":"This test maintains a steady load over an extended period to identify potential resource leaks or performance degradation over time.","scenario-4-mixed-workload-test#Scenario 4: Mixed Workload Test":"This test simulates a realistic usage pattern with a mix of different operations (sending messages, reading messages, creating groups, etc.).","interpreting-results#Interpreting Results":"The dashboard provides real-time visualizations of:\nActive connections over time\nMessage throughput (messages/second)\nMessage latency distribution\nError rates by operation type\nServer resource utilization\nWhen analyzing the results, pay attention to:\nInflection Points: Where performance metrics start to degrade\nError Rate Spikes: Sudden increases in failed operations\nLatency Increases: Growing delays in message delivery\nResource Saturation: CPU, memory, or network bottlenecks","system-optimizations#System Optimizations":"Based on stress test results, Whisper implements several optimizations:\nConnection Pooling: Efficient management of database connections\nMessage Batching: Grouping multiple messages into single database operations\nCaching Layer: In-memory caching of frequently accessed data\nLoad Balancing: Distribution of traffic across multiple server instances\nDatabase Sharding: Horizontal partitioning of data based on user or conversation IDs\nLazy Loading: Prioritizing critical data and deferring non-essential content\nThe stress test dashboard connects to Whisper's test environment. Results may vary compared to production performance due to different infrastructure configurations."}},"/uml":{"title":"UML Structure","data":{"":"This page presents the Unified Modeling Language (UML) diagrams that describe the architecture and class relationships of the Whisper Chat application.","core-component-structure#Core Component Structure":"The following class diagram illustrates the main components of the Whisper system and their relationships:","architecture-layers#Architecture Layers":"This diagram illustrates the layered architecture of the Whisper application:","message-encryption-flow#Message Encryption Flow":"The following diagram illustrates how message encryption works within Whisper:","notification-system#Notification System":"This diagram shows the components involved in Whisper's notification system:","websocket-connection-management#WebSocket Connection Management":"This diagram illustrates how Whisper manages WebSocket connections:","data-consistency-and-synchronization#Data Consistency and Synchronization":"This diagram illustrates Whisper's approach to data consistency and synchronization across devices:","server-architecture#Server Architecture":"This diagram shows the server-side architecture of Whisper:\nThese UML diagrams provide a comprehensive view of Whisper's architecture, helping developers understand how the various components work together to create a secure, efficient real-time communication system."}}}